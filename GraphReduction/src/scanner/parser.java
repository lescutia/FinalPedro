
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Apr 01 03:27:41 CST 2017
//----------------------------------------------------

package scanner;

import java_cup.runtime.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Apr 01 03:27:41 CST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\112\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\003\000\002\003\004\000\002\003\002" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\005\004\000\002\005\002\000\002\007\005\000\002" +
    "\007\006\000\002\010\006\000\002\011\010\000\002\012" +
    "\004\000\002\012\003\000\002\013\004\000\002\013\005" +
    "\000\002\017\014\000\002\014\003\000\002\014\005\000" +
    "\002\015\004\000\002\016\006\000\002\020\004\000\002" +
    "\020\002\000\002\021\004\000\002\021\005\000\002\021" +
    "\005\000\002\021\006\000\002\021\006\000\002\021\003" +
    "\000\002\021\003\000\002\021\012\000\002\021\005\000" +
    "\002\021\004\000\002\021\004\000\002\033\012\000\002" +
    "\034\017\000\002\022\005\000\002\023\003\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\023\004\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\005\000\002\023" +
    "\004\000\002\023\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\005\000\002\024\003\000\002\025\005\000\002" +
    "\025\006\000\002\026\003\000\002\026\005\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\030\003\000\002\030\005\000\002\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\020\002\ufffc\004\ufffc\005\006\010\ufffc\012" +
    "\ufffc\015\ufffc\031\ufffc\001\002\000\016\002\000\004\011" +
    "\010\013\012\015\015\014\031\022\001\002\000\004\002" +
    "\007\001\002\000\004\002\ufffe\001\002\000\004\002\001" +
    "\001\002\000\016\002\ufffb\004\ufffb\010\ufffb\012\ufffb\015" +
    "\ufffb\031\ufffb\001\002\000\004\024\uffbe\001\002\000\004" +
    "\002\uffff\001\002\000\004\024\uffbd\001\002\000\004\024" +
    "\023\001\002\000\006\007\216\024\uffbc\001\002\000\004" +
    "\024\023\001\002\000\016\002\ufffd\004\ufffd\010\ufffd\012" +
    "\ufffd\015\ufffd\031\ufffd\001\002\000\016\002\ufffa\004\ufffa" +
    "\010\ufffa\012\ufffa\015\ufffa\031\ufffa\001\002\000\016\002" +
    "\ufff9\004\ufff9\010\ufff9\012\ufff9\015\ufff9\031\ufff9\001\002" +
    "\000\004\024\uffbb\001\002\000\056\024\uffb8\030\uffb8\032" +
    "\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\041\uffb8\042\uffb8" +
    "\043\uffb8\044\uffb8\045\uffb8\046\uffb8\050\uffb8\051\uffb8\052" +
    "\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8" +
    "\001\002\000\006\032\027\034\025\001\002\000\034\002" +
    "\ufff6\004\ufff6\010\ufff6\012\ufff6\015\ufff6\016\ufff6\017\ufff6" +
    "\020\ufff6\022\ufff6\023\ufff6\024\ufff6\027\ufff6\031\ufff6\001" +
    "\002\000\004\030\041\001\002\000\014\004\011\010\013" +
    "\012\033\031\022\033\030\001\002\000\004\030\ufff0\001" +
    "\002\000\004\024\023\001\002\000\004\033\037\001\002" +
    "\000\004\024\uffbc\001\002\000\006\033\uffed\035\035\001" +
    "\002\000\012\004\011\010\013\012\033\031\022\001\002" +
    "\000\004\033\uffec\001\002\000\004\030\uffef\001\002\000" +
    "\006\033\uffeb\035\uffeb\001\002\000\032\004\ufff7\010\ufff7" +
    "\012\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\022\ufff7\023" +
    "\ufff7\024\ufff7\027\ufff7\031\ufff7\001\002\000\016\002\ufff4" +
    "\004\ufff4\010\ufff4\012\ufff4\015\ufff4\031\ufff4\001\002\000" +
    "\032\004\011\010\013\012\033\015\045\016\uffe8\017\uffe8" +
    "\020\uffe8\022\uffe8\023\uffe8\024\uffe8\027\uffe8\031\022\001" +
    "\002\000\004\024\023\001\002\000\004\024\023\001\002" +
    "\000\032\004\ufff8\010\ufff8\012\ufff8\015\ufff8\016\ufff8\017" +
    "\ufff8\020\ufff8\022\ufff8\023\ufff8\024\ufff8\027\ufff8\031\ufff8" +
    "\001\002\000\020\016\061\017\053\020\055\022\050\023" +
    "\063\024\023\027\060\001\002\000\004\032\203\001\002" +
    "\000\052\032\174\033\uffba\034\uffba\035\uffba\036\uffba\041" +
    "\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046\uffba\050\uffba" +
    "\051\uffba\052\uffba\053\uffba\054\uffba\055\uffba\056\uffba\057" +
    "\uffba\060\uffba\001\002\000\020\016\uffe9\017\uffe9\020\uffe9" +
    "\022\uffe9\023\uffe9\024\uffe9\027\uffe9\001\002\000\004\037" +
    "\171\001\002\000\012\036\135\041\166\042\165\060\136" +
    "\001\002\000\004\032\151\001\002\000\004\034\150\001" +
    "\002\000\004\034\147\001\002\000\016\002\uffea\004\uffea" +
    "\010\uffea\012\uffea\015\uffea\031\uffea\001\002\000\004\040" +
    "\143\001\002\000\020\016\uffe1\017\uffe1\020\uffe1\022\uffe1" +
    "\023\uffe1\024\uffe1\027\uffe1\001\002\000\024\013\067\014" +
    "\072\024\023\025\101\026\074\032\100\034\076\044\065" +
    "\047\077\001\002\000\020\016\uffe2\017\uffe2\020\uffe2\022" +
    "\uffe2\023\uffe2\024\uffe2\027\uffe2\001\002\000\022\013\067" +
    "\014\072\024\023\025\101\026\074\032\100\044\065\047" +
    "\077\001\002\000\040\033\uffca\034\uffca\035\uffca\043\uffca" +
    "\044\uffca\045\uffca\046\uffca\050\uffca\051\uffca\052\uffca\053" +
    "\uffca\054\uffca\055\uffca\056\uffca\057\uffca\001\002\000\040" +
    "\033\uffc6\034\uffc6\035\uffc6\043\uffc6\044\uffc6\045\uffc6\046" +
    "\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6" +
    "\056\uffc6\057\uffc6\001\002\000\034\034\141\043\112\044" +
    "\104\045\115\046\105\050\103\051\117\052\116\053\106" +
    "\054\113\055\110\056\107\057\111\001\002\000\044\033" +
    "\uffc9\034\uffc9\035\uffc9\036\135\043\uffc9\044\uffc9\045\uffc9" +
    "\046\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9\055" +
    "\uffc9\056\uffc9\057\uffc9\060\136\001\002\000\040\033\uffc5" +
    "\034\uffc5\035\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\050" +
    "\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5" +
    "\057\uffc5\001\002\000\040\033\uffd9\034\uffd9\035\uffd9\043" +
    "\uffd9\044\uffd9\045\uffd9\046\uffd9\050\uffd9\051\uffd9\052\uffd9" +
    "\053\uffd9\054\uffd9\055\uffd9\056\uffd9\057\uffd9\001\002\000" +
    "\040\033\uffc7\034\uffc7\035\uffc7\043\uffc7\044\uffc7\045\uffc7" +
    "\046\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055" +
    "\uffc7\056\uffc7\057\uffc7\001\002\000\040\033\uffc3\034\uffc3" +
    "\035\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\050\uffc3\051" +
    "\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3\057\uffc3" +
    "\001\002\000\020\016\uffde\017\uffde\020\uffde\022\uffde\023" +
    "\uffde\024\uffde\027\uffde\001\002\000\022\013\067\014\072" +
    "\024\023\025\101\026\074\032\100\044\065\047\077\001" +
    "\002\000\022\013\067\014\072\024\023\025\101\026\074" +
    "\032\100\044\065\047\077\001\002\000\040\033\uffc8\034" +
    "\uffc8\035\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\050\uffc8" +
    "\051\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8\057" +
    "\uffc8\001\002\000\034\033\114\043\112\044\104\045\115" +
    "\046\105\050\103\051\117\052\116\053\106\054\113\055" +
    "\110\056\107\057\111\001\002\000\022\013\067\014\072" +
    "\024\023\025\101\026\074\032\100\044\065\047\077\001" +
    "\002\000\022\013\067\014\072\024\023\025\101\026\074" +
    "\032\100\044\065\047\077\001\002\000\022\013\067\014" +
    "\072\024\023\025\101\026\074\032\100\044\065\047\077" +
    "\001\002\000\022\013\067\014\072\024\023\025\101\026" +
    "\074\032\100\044\065\047\077\001\002\000\022\013\067" +
    "\014\072\024\023\025\101\026\074\032\100\044\065\047" +
    "\077\001\002\000\022\013\067\014\072\024\023\025\101" +
    "\026\074\032\100\044\065\047\077\001\002\000\022\013" +
    "\067\014\072\024\023\025\101\026\074\032\100\044\065" +
    "\047\077\001\002\000\022\013\067\014\072\024\023\025" +
    "\101\026\074\032\100\044\065\047\077\001\002\000\022" +
    "\013\067\014\072\024\023\025\101\026\074\032\100\044" +
    "\065\047\077\001\002\000\040\033\uffc4\034\uffc4\035\uffc4" +
    "\043\uffc4\044\uffc4\045\uffc4\046\uffc4\050\uffc4\051\uffc4\052" +
    "\uffc4\053\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4\001\002" +
    "\000\022\013\067\014\072\024\023\025\101\026\074\032" +
    "\100\044\065\047\077\001\002\000\022\013\067\014\072" +
    "\024\023\025\101\026\074\032\100\044\065\047\077\001" +
    "\002\000\022\013\067\014\072\024\023\025\101\026\074" +
    "\032\100\044\065\047\077\001\002\000\040\033\uffd2\034" +
    "\uffd2\035\uffd2\043\112\044\104\045\115\046\105\050\103" +
    "\051\uffd2\052\116\053\106\054\113\055\110\056\107\057" +
    "\111\001\002\000\024\033\uffd1\034\uffd1\035\uffd1\043\112" +
    "\044\104\045\115\046\105\050\uffd1\051\uffd1\001\002\000" +
    "\040\033\uffd6\034\uffd6\035\uffd6\043\uffd6\044\uffd6\045\uffd6" +
    "\046\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\054\uffd6\055" +
    "\uffd6\056\uffd6\057\uffd6\001\002\000\024\033\uffcf\034\uffcf" +
    "\035\uffcf\043\112\044\104\045\115\046\105\050\uffcf\051" +
    "\uffcf\001\002\000\040\033\uffd8\034\uffd8\035\uffd8\043\uffd8" +
    "\044\uffd8\045\115\046\105\050\uffd8\051\uffd8\052\uffd8\053" +
    "\uffd8\054\uffd8\055\uffd8\056\uffd8\057\uffd8\001\002\000\024" +
    "\033\uffcc\034\uffcc\035\uffcc\043\112\044\104\045\115\046" +
    "\105\050\uffcc\051\uffcc\001\002\000\024\033\uffce\034\uffce" +
    "\035\uffce\043\112\044\104\045\115\046\105\050\uffce\051" +
    "\uffce\001\002\000\024\033\uffcd\034\uffcd\035\uffcd\043\112" +
    "\044\104\045\115\046\105\050\uffcd\051\uffcd\001\002\000" +
    "\024\033\uffd0\034\uffd0\035\uffd0\043\112\044\104\045\115" +
    "\046\105\050\uffd0\051\uffd0\001\002\000\040\033\uffd5\034" +
    "\uffd5\035\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\050\uffd5" +
    "\051\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5\057" +
    "\uffd5\001\002\000\040\033\uffd7\034\uffd7\035\uffd7\043\uffd7" +
    "\044\uffd7\045\115\046\105\050\uffd7\051\uffd7\052\uffd7\053" +
    "\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7\001\002\000\040" +
    "\033\uffd3\034\uffd3\035\uffd3\043\112\044\104\045\115\046" +
    "\105\050\uffd3\051\uffd3\052\116\053\106\054\113\055\110" +
    "\056\107\057\111\001\002\000\040\033\uffd4\034\uffd4\035" +
    "\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\050\uffd4\051\uffd4" +
    "\052\uffd4\053\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4\001" +
    "\002\000\004\024\023\001\002\000\022\013\067\014\072" +
    "\024\023\025\101\026\074\032\100\044\065\047\077\001" +
    "\002\000\040\033\uffda\034\uffda\035\uffda\043\112\044\104" +
    "\045\115\046\105\050\103\051\117\052\116\053\106\054" +
    "\113\055\110\056\107\057\111\001\002\000\050\033\uffb9" +
    "\034\uffb9\035\uffb9\036\uffb9\041\uffb9\042\uffb9\043\uffb9\044" +
    "\uffb9\045\uffb9\046\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9" +
    "\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\001\002\000" +
    "\020\016\uffdf\017\uffdf\020\uffdf\022\uffdf\023\uffdf\024\uffdf" +
    "\027\uffdf\001\002\000\040\033\uffcb\034\uffcb\035\uffcb\043" +
    "\uffcb\044\uffcb\045\115\046\105\050\uffcb\051\uffcb\052\uffcb" +
    "\053\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\001\002\000" +
    "\004\024\023\001\002\000\006\034\146\036\135\001\002" +
    "\000\006\034\uffba\036\uffba\001\002\000\020\016\uffe4\017" +
    "\uffe4\020\uffe4\022\uffe4\023\uffe4\024\uffe4\027\uffe4\001\002" +
    "\000\020\016\uffdd\017\uffdd\020\uffdd\022\uffdd\023\uffdd\024" +
    "\uffdd\027\uffdd\001\002\000\020\016\uffe7\017\uffe7\020\uffe7" +
    "\022\uffe7\023\uffe7\024\uffe7\027\uffe7\001\002\000\022\013" +
    "\067\014\072\024\023\025\101\026\074\032\100\044\065" +
    "\047\077\001\002\000\034\033\153\043\112\044\104\045" +
    "\115\046\105\050\103\051\117\052\116\053\106\054\113" +
    "\055\110\056\107\057\111\001\002\000\004\030\154\001" +
    "\002\000\032\004\ufff7\010\ufff7\012\ufff7\015\ufff7\016\ufff7" +
    "\017\ufff7\020\ufff7\022\ufff7\023\ufff7\024\ufff7\027\ufff7\031" +
    "\ufff7\001\002\000\032\004\011\010\013\012\033\015\045" +
    "\016\uffe8\017\uffe8\020\uffe8\022\uffe8\023\uffe8\024\uffe8\027" +
    "\uffe8\031\022\001\002\000\020\016\061\017\053\020\055" +
    "\022\050\023\063\024\023\027\157\001\002\000\022\016" +
    "\uffdc\017\uffdc\020\uffdc\021\160\022\uffdc\023\uffdc\024\uffdc" +
    "\027\uffdc\001\002\000\004\030\161\001\002\000\032\004" +
    "\ufff7\010\ufff7\012\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7" +
    "\022\ufff7\023\ufff7\024\ufff7\027\ufff7\031\ufff7\001\002\000" +
    "\032\004\011\010\013\012\033\015\045\016\uffe8\017\uffe8" +
    "\020\uffe8\022\uffe8\023\uffe8\024\uffe8\027\uffe8\031\022\001" +
    "\002\000\020\016\061\017\053\020\055\022\050\023\063" +
    "\024\023\027\164\001\002\000\020\016\uffdb\017\uffdb\020" +
    "\uffdb\022\uffdb\023\uffdb\024\uffdb\027\uffdb\001\002\000\004" +
    "\034\170\001\002\000\004\034\167\001\002\000\020\016" +
    "\uffe6\017\uffe6\020\uffe6\022\uffe6\023\uffe6\024\uffe6\027\uffe6" +
    "\001\002\000\020\016\uffe5\017\uffe5\020\uffe5\022\uffe5\023" +
    "\uffe5\024\uffe5\027\uffe5\001\002\000\022\013\067\014\072" +
    "\024\023\025\101\026\074\032\100\044\065\047\077\001" +
    "\002\000\034\034\173\043\112\044\104\045\115\046\105" +
    "\050\103\051\117\052\116\053\106\054\113\055\110\056" +
    "\107\057\111\001\002\000\020\016\uffe3\017\uffe3\020\uffe3" +
    "\022\uffe3\023\uffe3\024\uffe3\027\uffe3\001\002\000\024\013" +
    "\067\014\072\024\023\025\101\026\074\032\100\033\177" +
    "\044\065\047\077\001\002\000\036\033\uffc0\035\uffc0\043" +
    "\112\044\104\045\115\046\105\050\103\051\117\052\116" +
    "\053\106\054\113\055\110\056\107\057\111\001\002\000" +
    "\006\033\201\035\200\001\002\000\040\033\uffc2\034\uffc2" +
    "\035\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\050\uffc2\051" +
    "\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2" +
    "\001\002\000\022\013\067\014\072\024\023\025\101\026" +
    "\074\032\100\044\065\047\077\001\002\000\040\033\uffc1" +
    "\034\uffc1\035\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\050" +
    "\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1" +
    "\057\uffc1\001\002\000\036\033\uffbf\035\uffbf\043\112\044" +
    "\104\045\115\046\105\050\103\051\117\052\116\053\106" +
    "\054\113\055\110\056\107\057\111\001\002\000\022\013" +
    "\067\014\072\024\023\025\101\026\074\032\100\044\065" +
    "\047\077\001\002\000\034\033\205\043\112\044\104\045" +
    "\115\046\105\050\103\051\117\052\116\053\106\054\113" +
    "\055\110\056\107\057\111\001\002\000\004\030\206\001" +
    "\002\000\032\004\ufff7\010\ufff7\012\ufff7\015\ufff7\016\ufff7" +
    "\017\ufff7\020\ufff7\022\ufff7\023\ufff7\024\ufff7\027\ufff7\031" +
    "\ufff7\001\002\000\032\004\011\010\013\012\033\015\045" +
    "\016\uffe8\017\uffe8\020\uffe8\022\uffe8\023\uffe8\024\uffe8\027" +
    "\uffe8\031\022\001\002\000\020\016\061\017\053\020\055" +
    "\022\050\023\063\024\023\027\211\001\002\000\020\016" +
    "\uffe0\017\uffe0\020\uffe0\022\uffe0\023\uffe0\024\uffe0\027\uffe0" +
    "\001\002\000\004\024\023\001\002\000\004\034\214\001" +
    "\002\000\034\002\ufff5\004\ufff5\010\ufff5\012\ufff5\015\ufff5" +
    "\016\ufff5\017\ufff5\020\ufff5\022\ufff5\023\ufff5\024\ufff5\027" +
    "\ufff5\031\ufff5\001\002\000\004\034\025\001\002\000\004" +
    "\032\217\001\002\000\004\033\220\001\002\000\004\030" +
    "\221\001\002\000\030\004\ufff7\010\ufff7\012\ufff7\015\ufff7" +
    "\016\ufff7\017\ufff7\020\ufff7\022\ufff7\023\ufff7\024\ufff7\031" +
    "\ufff7\001\002\000\030\004\011\010\013\012\033\015\045" +
    "\016\uffe8\017\uffe8\020\uffe8\022\uffe8\023\uffe8\024\uffe8\031" +
    "\022\001\002\000\016\016\061\017\053\020\055\022\050" +
    "\023\224\024\023\001\002\000\024\013\067\014\072\024" +
    "\023\025\101\026\074\032\100\034\225\044\065\047\077" +
    "\001\002\000\020\016\uffde\017\uffde\020\uffde\022\uffde\023" +
    "\uffde\024\uffde\027\226\001\002\000\004\002\uffee\001\002" +
    "\000\006\024\023\030\230\001\002\000\014\004\011\010" +
    "\013\012\033\015\045\031\022\001\002\000\016\004\011" +
    "\010\013\012\033\015\045\027\234\031\022\001\002\000" +
    "\016\004\ufff1\010\ufff1\012\ufff1\015\ufff1\027\ufff1\031\ufff1" +
    "\001\002\000\016\004\ufff2\010\ufff2\012\ufff2\015\ufff2\027" +
    "\ufff2\031\ufff2\001\002\000\004\034\235\001\002\000\016" +
    "\002\ufff3\004\ufff3\010\ufff3\012\ufff3\015\ufff3\031\ufff3\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\006\002\004\003\003\001\001\000\016\004" +
    "\016\007\007\010\017\011\020\017\011\027\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\226\001\001\000\002\001\001\000" +
    "\004\031\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\025\001\001\000\002\001\001\000\004\016\041" +
    "\001\001\000\010\014\031\015\033\027\030\001\001\000" +
    "\002\001\001\000\004\031\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\014\035\015" +
    "\033\027\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\042\001\001\000\002\001" +
    "\001\000\010\007\045\020\046\027\043\001\001\000\004" +
    "\031\214\001\001\000\004\031\211\001\001\000\002\001" +
    "\001\000\020\021\051\022\055\025\056\030\053\031\050" +
    "\033\063\034\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\022\072\023\067\024\065\025\074\030\070\031\050\001" +
    "\001\000\002\001\001\000\016\022\072\023\141\024\065" +
    "\025\074\030\070\031\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\022\072\023\133\024\065" +
    "\025\074\030\070\031\050\001\001\000\016\022\072\023" +
    "\101\024\065\025\074\030\070\031\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\022\072\023\132\024" +
    "\065\025\074\030\070\031\050\001\001\000\016\022\072" +
    "\023\131\024\065\025\074\030\070\031\050\001\001\000" +
    "\016\022\072\023\130\024\065\025\074\030\070\031\050" +
    "\001\001\000\016\022\072\023\127\024\065\025\074\030" +
    "\070\031\050\001\001\000\016\022\072\023\126\024\065" +
    "\025\074\030\070\031\050\001\001\000\016\022\072\023" +
    "\125\024\065\025\074\030\070\031\050\001\001\000\016" +
    "\022\072\023\124\024\065\025\074\030\070\031\050\001" +
    "\001\000\016\022\072\023\123\024\065\025\074\030\070" +
    "\031\050\001\001\000\016\022\072\023\122\024\065\025" +
    "\074\030\070\031\050\001\001\000\002\001\001\000\016" +
    "\022\072\023\121\024\065\025\074\030\070\031\050\001" +
    "\001\000\016\022\072\023\120\024\065\025\074\030\070" +
    "\031\050\001\001\000\016\022\072\023\117\024\065\025" +
    "\074\030\070\031\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\137\001\001" +
    "\000\016\022\072\023\136\024\065\025\074\030\070\031" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\030\143\031\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\022\072\023" +
    "\151\024\065\025\074\030\070\031\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\154\001\001\000" +
    "\010\007\045\020\155\027\043\001\001\000\020\021\051" +
    "\022\055\025\056\030\053\031\050\033\063\034\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\161" +
    "\001\001\000\010\007\045\020\162\027\043\001\001\000" +
    "\020\021\051\022\055\025\056\030\053\031\050\033\063" +
    "\034\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\022\072\023\171\024\065\025\074\030\070\031\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\022\072" +
    "\023\174\024\065\025\074\026\175\030\070\031\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\022\072\023\201\024\065\025\074\030\070\031" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\022\072\023\203\024\065\025\074\030\070\031\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\206" +
    "\001\001\000\010\007\045\020\207\027\043\001\001\000" +
    "\020\021\051\022\055\025\056\030\053\031\050\033\063" +
    "\034\061\001\001\000\002\001\001\000\004\031\212\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\221\001\001\000\010\007\045\020\222\027\043" +
    "\001\001\000\020\021\051\022\055\025\056\030\053\031" +
    "\050\033\063\034\061\001\001\000\016\022\072\023\067" +
    "\024\065\025\074\030\070\031\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\212\001\001\000\010" +
    "\007\231\012\230\027\043\001\001\000\006\007\232\027" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public static void main(String args[]) throws Exception{
		new parser(new Yylex(System.in)).parse();
}
public void syntax_error(Symbol s){
System.out.println("Error en la linea "+(s.right+1)+"Columna"+s.left+" .Identificador "+s.value+" no reconocido ");
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


ArrayList<node> l=new ArrayList<node>();
ArrayList<String> boolexp=new ArrayList<String>();
LinkedList<node> list=new LinkedList<node>();
node program;
int contif=0;
int label=0;


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // id ::= ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=i;

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // loc ::= loc DOT id 
            {
              String RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String lc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loc",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // loc ::= id 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=""+i;

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loc",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // type ::= FLOAT 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT="float";
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // type ::= VOID 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT="void";
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // type ::= BOOL 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                RESULT="boolean";
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // type ::= INT 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                RESULT="int";
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // actualList ::= actualList COMMA exp 
            {
              String RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String al = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   RESULT=RESULT+e;

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualList",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // actualList ::= exp 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                   RESULT=e;

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualList",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // fncall ::= id LPAREN actualList RPAREN 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String al = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fncall",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // fncall ::= id LPAREN RPAREN 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                                
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fncall",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // term ::= fncall 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=""+f;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // term ::= LPAREN exp RPAREN 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    RESULT="("+e+")";
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // term ::= FALSE 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT="FALSE";
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // term ::= TRUE 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT="TRUE";
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // term ::= STRINGLITERAL 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=s;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // term ::= INTLITERAL 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                RESULT=i;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // term ::= loc 
            {
              String RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=""+lc;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= term 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT= t;
                 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= MINUS exp 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT="-"+e;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= exp GREATEREQ exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+">="+e2;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= exp LESSEQ exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+"<="+e2;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= exp GREATER exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+">"+e2;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= exp LESS exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+"<"+e2;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= exp NOTEQUALS exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+"!="+e2;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= exp EQUALS exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+"=="+e2;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= exp OR exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+"||"+e2;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= exp AND exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+"&&"+e2;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= NOT exp 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT="!"+e;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= exp DIVIDE exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+"/"+e2;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= exp TIMES exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+"times"+e2;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= exp MINUS exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+"-"+e2;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= exp PLUS exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+"+"+e2;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= assignExp 
            {
              String RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ae = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=""+ae;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // assignExp ::= loc ASSIGN exp 
            {
              String RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String lc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=lc+" -> "+e;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignExp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CIF2 ::= IF LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY ELSE LCURLY varDeclList stmtList RCURLY 
            {
              node RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String ii = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vdltleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vdltright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		LinkedList<node> vdlt = (LinkedList<node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sltleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int sltright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<node> slt = (LinkedList<node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vdleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vdleright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<node> vdle = (LinkedList<node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sleright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<node> sle = (LinkedList<node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        boolexp.add(e);
                        vdlt.addAll(slt);
                        vdle.addAll(sle);
                        for(int i=0;i<vdlt.size();i++){
                            if(i>0){
                                if(vdlt.get(i-1).type==0)
                                vdlt.get(i-1).setLeft(vdlt.get(i));
                            }
                        }
                         for(int i=0;i<vdle.size();i++){
                            if(i>0){
                                if(vdle.get(i-1).type==0)
                                vdle.get(i-1).setLeft(vdle.get(i));
                            }
                        }
                        RESULT=new node("IF "+e);
                        RESULT.setLeft(vdlt.get(0));
                        RESULT.setRight(vdle.get(0));
                        RESULT.lastLeft=vdlt.get(vdlt.size()-1);
                        RESULT.lastRight=vdle.get(vdle.size()-1);
                        RESULT.setType(2);


                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CIF2",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CIF1 ::= IF LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY 
            {
              node RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String ii = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<node> vdl = (LinkedList<node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<node> sl = (LinkedList<node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		                    
                      boolexp.add(e);
                      vdl.addAll(sl);
                      for(int i=0;i<vdl.size();i++){
                        if(i>0){
                            if(vdl.get(i-1).type==0)
                            vdl.get(i-1).setLeft(vdl.get(i));
                        }
                      }
                      RESULT=new node("IF "+e);
                      RESULT.setLeft(vdl.get(0));
                      RESULT.setType(1);
                      RESULT.lastLeft=vdl.get(vdl.size()-1);
 


              CUP$parser$result = parser.getSymbolFactory().newSymbol("CIF1",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt ::= fncall SEMICOLON 
            {
              node RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= RETURN SEMICOLON 
            {
              node RESULT =null;
		 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= RETURN exp SEMICOLON 
            {
              node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    RESULT=new node("return "+e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= WHILE LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY 
            {
              node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<node> vdl = (LinkedList<node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<node> sl = (LinkedList<node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                         boolexp.add(e);  
                         vdl.addAll(sl);
                         for(int i=0;i<vdl.size();i++){
                              if(i>0){
                                  if(vdl.get(i-1).type==0)
                                  vdl.get(i-1).setLeft(vdl.get(i));
                              }
                         }
                         RESULT=new node("WHILE "+e);
                         RESULT.setLeft(vdl.get(0));
                         RESULT.setType(3);
                         vdl.get(vdl.size()-1).setLeft(RESULT);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= CIF2 
            {
              node RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		node ii = (node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT=ii;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= CIF1 
            {
              node RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		node ii = (node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT=ii;label++;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= COUT WRITE exp SEMICOLON 
            {
              node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		                   
                    RESULT=new node(" cout "+e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= CIN READ loc SEMICOLON 
            {
              node RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String lc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    RESULT=new node(" cin "+lc);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= loc MINUSMINUS SEMICOLON 
            {
              node RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String lc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                    RESULT=new node(lc+"--");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= loc PLUSPLUS SEMICOLON 
            {
              node RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String lc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                    RESULT=new node(lc +"++");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt ::= assignExp SEMICOLON 
            {
              node RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ae = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new node(ae);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmtList ::= 
            {
              LinkedList<node> RESULT =null;
		 
                   RESULT=new LinkedList<node>();

                   label++;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtList",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmtList ::= stmtList stmt 
            {
              LinkedList<node> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<node> sl = (LinkedList<node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		node s = (node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                   
                   sl.addLast(s);
                   if(s.type==2){
                    node union=new node("end if"+label);
                    label++;
                    s.lastLeft.left=union;
                    s.lastRight.left=union;
                    sl.add(union);
                   }
                   if(s.type==1){
                    node union=new node("end if"+label);
                    label++;
                    s.lastLeft.left=union;
                    s.right=union;
                    sl.add(union);
                   }
                   if(s.type==3){
                    node union=new node("end while"+label);
                    label++;
                    s.right=union;
                    sl.add(union);
                   }
                   RESULT=sl;
                   
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtList",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // fnBody ::= LCURLY varDeclList stmtList RCURLY 
            {
              String RESULT =null;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<node> vdl = (LinkedList<node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<node> sl = (LinkedList<node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                            
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fnBody",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // formalDecl ::= type id 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT="declare "+t+" "+i;

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalDecl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // formalsList ::= formalDecl COMMA formalsList 
            {
              String RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String fd = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                   RESULT=RESULT+fd;

                    label++;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalsList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // formalsList ::= formalDecl 
            {
              String RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fd = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                   RESULT=fd;


                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalsList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // mainbody ::= VOID MAIN LPAREN RPAREN LCURLY varDeclList stmtList RETURN SEMICOLON RCURLY 
            {
              String RESULT =null;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<node> vdl = (LinkedList<node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<node> sl = (LinkedList<node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 
                        vdl.addAll(sl);
                        for(int i=0;i<vdl.size();i++){
                        if(i>0){
                            if(vdl.get(i-1).type==0)
                            vdl.get(i-1).setLeft(vdl.get(i));
                        }
                        }
                        program=vdl.get(0);
                        list=vdl;

                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mainbody",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // formals ::= LPAREN formalsList RPAREN 
            {
              String RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String fl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formals",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // formals ::= LPAREN RPAREN 
            {
              String RESULT =null;
		 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formals",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // structBody ::= varDecl 
            {
              String RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vd = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structBody",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // structBody ::= structBody varDecl 
            {
              String RESULT =null;
		int sbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sb = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vd = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                   
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structBody",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // structDecl ::= STRUCT id LCURLY structBody RCURLY SEMICOLON 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String sb = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structDecl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // fnDecl ::= type id formals fnBody 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fb = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fnDecl",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // varDecl ::= STRUCT id id SEMICOLON 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDecl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // varDecl ::= type id SEMICOLON 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = t+" "+i;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDecl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // varDeclList ::= 
            {
              LinkedList<node> RESULT =null;
		 RESULT = new LinkedList<node>();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDeclList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // varDeclList ::= varDeclList varDecl 
            {
              LinkedList<node> RESULT =null;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<node> vdl = (LinkedList<node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vd = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 vdl.addLast(new node(vd));
                   RESULT = vdl;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDeclList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decl ::= structDecl 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=s;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // decl ::= fnDecl 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=f;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decl ::= varDecl 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=v;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declList ::= 
            {
              node RESULT =null;
		 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declList ::= declList decl 
            {
              node RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		node dl = (node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new node("");
                   
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= errorlex 
            {
              String RESULT =null;
		System.out.println("errorlex");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= declList mainbody 
            {
              String RESULT =null;
		    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= declList 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

