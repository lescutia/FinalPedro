
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Apr 21 05:13:14 CDT 2017
//----------------------------------------------------

package scanner;

import java_cup.runtime.*;
import java.util.*;
import graphreduction.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Apr 21 05:13:14 CDT 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\115\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\003\000\002\003\004\000\002\003\002" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\005\004\000\002\005\002\000\002\007\005\000\002" +
    "\007\006\000\002\010\006\000\002\011\010\000\002\012" +
    "\004\000\002\012\003\000\002\013\004\000\002\013\005" +
    "\000\002\017\012\000\002\014\003\000\002\014\005\000" +
    "\002\015\004\000\002\016\006\000\002\020\004\000\002" +
    "\020\002\000\002\021\004\000\002\021\005\000\002\021" +
    "\005\000\002\021\006\000\002\021\006\000\002\021\003" +
    "\000\002\021\003\000\002\035\002\000\002\021\013\000" +
    "\002\021\005\000\002\021\004\000\002\021\004\000\002" +
    "\021\004\000\002\021\004\000\002\033\012\000\002\034" +
    "\017\000\002\022\005\000\002\023\003\000\002\023\005" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\004\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\004" +
    "\000\002\023\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\005\000\002\024\003\000\002\025\005\000\002\025" +
    "\006\000\002\026\003\000\002\026\005\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\030\003\000\002\030\005\000\002\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\236\000\020\002\ufffc\004\ufffc\005\006\010\ufffc\012" +
    "\ufffc\015\ufffc\031\ufffc\001\002\000\016\002\000\004\011" +
    "\010\013\012\015\015\014\031\022\001\002\000\004\002" +
    "\007\001\002\000\004\002\ufffe\001\002\000\004\002\001" +
    "\001\002\000\016\002\ufffb\004\ufffb\010\ufffb\012\ufffb\015" +
    "\ufffb\031\ufffb\001\002\000\004\024\uffbb\001\002\000\004" +
    "\002\uffff\001\002\000\004\024\uffba\001\002\000\004\024" +
    "\023\001\002\000\006\006\223\024\uffb9\001\002\000\004" +
    "\024\023\001\002\000\016\002\ufffd\004\ufffd\010\ufffd\012" +
    "\ufffd\015\ufffd\031\ufffd\001\002\000\016\002\ufffa\004\ufffa" +
    "\010\ufffa\012\ufffa\015\ufffa\031\ufffa\001\002\000\016\002" +
    "\ufff9\004\ufff9\010\ufff9\012\ufff9\015\ufff9\031\ufff9\001\002" +
    "\000\004\024\uffb8\001\002\000\056\011\uffb5\024\uffb5\030" +
    "\uffb5\032\uffb5\033\uffb5\034\uffb5\036\uffb5\041\uffb5\042\uffb5" +
    "\043\uffb5\044\uffb5\045\uffb5\046\uffb5\050\uffb5\051\uffb5\052" +
    "\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5" +
    "\001\002\000\006\032\027\034\025\001\002\000\040\002" +
    "\ufff6\004\ufff6\010\ufff6\012\ufff6\015\ufff6\016\ufff6\017\ufff6" +
    "\020\ufff6\022\ufff6\023\ufff6\024\ufff6\027\ufff6\031\ufff6\061" +
    "\ufff6\062\ufff6\001\002\000\004\030\041\001\002\000\014" +
    "\004\011\010\013\012\033\031\022\033\030\001\002\000" +
    "\004\030\ufff0\001\002\000\004\024\023\001\002\000\004" +
    "\033\037\001\002\000\004\024\uffb9\001\002\000\006\011" +
    "\035\033\uffed\001\002\000\012\004\011\010\013\012\033" +
    "\031\022\001\002\000\004\033\uffec\001\002\000\004\030" +
    "\uffef\001\002\000\006\011\uffeb\033\uffeb\001\002\000\036" +
    "\004\ufff7\010\ufff7\012\ufff7\015\ufff7\016\ufff7\017\ufff7\020" +
    "\ufff7\022\ufff7\023\ufff7\024\ufff7\027\ufff7\031\ufff7\061\ufff7" +
    "\062\ufff7\001\002\000\016\002\ufff4\004\ufff4\010\ufff4\012" +
    "\ufff4\015\ufff4\031\ufff4\001\002\000\036\004\011\010\013" +
    "\012\033\015\045\016\uffe8\017\uffe8\020\uffe8\022\uffe8\023" +
    "\uffe8\024\uffe8\027\uffe8\031\022\061\uffe8\062\uffe8\001\002" +
    "\000\004\024\023\001\002\000\004\024\023\001\002\000" +
    "\036\004\ufff8\010\ufff8\012\ufff8\015\ufff8\016\ufff8\017\ufff8" +
    "\020\ufff8\022\ufff8\023\ufff8\024\ufff8\027\ufff8\031\ufff8\061" +
    "\ufff8\062\ufff8\001\002\000\024\016\061\017\053\020\054" +
    "\022\050\023\064\024\023\027\060\061\066\062\062\001" +
    "\002\000\004\032\uffe0\001\002\000\052\011\uffb7\032\200" +
    "\033\uffb7\034\uffb7\036\uffb7\041\uffb7\042\uffb7\043\uffb7\044" +
    "\uffb7\045\uffb7\046\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7" +
    "\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7\001\002\000" +
    "\024\016\uffe9\017\uffe9\020\uffe9\022\uffe9\023\uffe9\024\uffe9" +
    "\027\uffe9\061\uffe9\062\uffe9\001\002\000\004\037\175\001" +
    "\002\000\004\032\161\001\002\000\012\036\140\041\156" +
    "\042\155\060\141\001\002\000\004\034\154\001\002\000" +
    "\004\034\153\001\002\000\016\002\uffea\004\uffea\010\uffea" +
    "\012\uffea\015\uffea\031\uffea\001\002\000\004\040\147\001" +
    "\002\000\004\034\146\001\002\000\024\016\uffe1\017\uffe1" +
    "\020\uffe1\022\uffe1\023\uffe1\024\uffe1\027\uffe1\061\uffe1\062" +
    "\uffe1\001\002\000\024\013\073\014\075\024\023\025\104" +
    "\026\077\032\103\034\101\044\070\047\102\001\002\000" +
    "\024\016\uffe2\017\uffe2\020\uffe2\022\uffe2\023\uffe2\024\uffe2" +
    "\027\uffe2\061\uffe2\062\uffe2\001\002\000\004\034\067\001" +
    "\002\000\024\016\uffdd\017\uffdd\020\uffdd\022\uffdd\023\uffdd" +
    "\024\uffdd\027\uffdd\061\uffdd\062\uffdd\001\002\000\022\013" +
    "\073\014\075\024\023\025\104\026\077\032\103\044\070" +
    "\047\102\001\002\000\040\011\uffc7\033\uffc7\034\uffc7\043" +
    "\uffc7\044\uffc7\045\uffc7\046\uffc7\050\uffc7\051\uffc7\052\uffc7" +
    "\053\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7\001\002\000" +
    "\034\034\144\043\115\044\107\045\120\046\110\050\106" +
    "\051\122\052\121\053\111\054\116\055\113\056\112\057" +
    "\114\001\002\000\040\011\uffc3\033\uffc3\034\uffc3\043\uffc3" +
    "\044\uffc3\045\uffc3\046\uffc3\050\uffc3\051\uffc3\052\uffc3\053" +
    "\uffc3\054\uffc3\055\uffc3\056\uffc3\057\uffc3\001\002\000\044" +
    "\011\uffc6\033\uffc6\034\uffc6\036\140\043\uffc6\044\uffc6\045" +
    "\uffc6\046\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6" +
    "\055\uffc6\056\uffc6\057\uffc6\060\141\001\002\000\040\011" +
    "\uffc2\033\uffc2\034\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2" +
    "\050\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056" +
    "\uffc2\057\uffc2\001\002\000\040\011\uffd6\033\uffd6\034\uffd6" +
    "\043\uffd6\044\uffd6\045\uffd6\046\uffd6\050\uffd6\051\uffd6\052" +
    "\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6\001\002" +
    "\000\040\011\uffc4\033\uffc4\034\uffc4\043\uffc4\044\uffc4\045" +
    "\uffc4\046\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4" +
    "\055\uffc4\056\uffc4\057\uffc4\001\002\000\040\011\uffc0\033" +
    "\uffc0\034\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\050\uffc0" +
    "\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057" +
    "\uffc0\001\002\000\024\016\uffdb\017\uffdb\020\uffdb\022\uffdb" +
    "\023\uffdb\024\uffdb\027\uffdb\061\uffdb\062\uffdb\001\002\000" +
    "\022\013\073\014\075\024\023\025\104\026\077\032\103" +
    "\044\070\047\102\001\002\000\022\013\073\014\075\024" +
    "\023\025\104\026\077\032\103\044\070\047\102\001\002" +
    "\000\040\011\uffc5\033\uffc5\034\uffc5\043\uffc5\044\uffc5\045" +
    "\uffc5\046\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5" +
    "\055\uffc5\056\uffc5\057\uffc5\001\002\000\034\033\117\043" +
    "\115\044\107\045\120\046\110\050\106\051\122\052\121" +
    "\053\111\054\116\055\113\056\112\057\114\001\002\000" +
    "\022\013\073\014\075\024\023\025\104\026\077\032\103" +
    "\044\070\047\102\001\002\000\022\013\073\014\075\024" +
    "\023\025\104\026\077\032\103\044\070\047\102\001\002" +
    "\000\022\013\073\014\075\024\023\025\104\026\077\032" +
    "\103\044\070\047\102\001\002\000\022\013\073\014\075" +
    "\024\023\025\104\026\077\032\103\044\070\047\102\001" +
    "\002\000\022\013\073\014\075\024\023\025\104\026\077" +
    "\032\103\044\070\047\102\001\002\000\022\013\073\014" +
    "\075\024\023\025\104\026\077\032\103\044\070\047\102" +
    "\001\002\000\022\013\073\014\075\024\023\025\104\026" +
    "\077\032\103\044\070\047\102\001\002\000\022\013\073" +
    "\014\075\024\023\025\104\026\077\032\103\044\070\047" +
    "\102\001\002\000\022\013\073\014\075\024\023\025\104" +
    "\026\077\032\103\044\070\047\102\001\002\000\040\011" +
    "\uffc1\033\uffc1\034\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1" +
    "\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\056" +
    "\uffc1\057\uffc1\001\002\000\022\013\073\014\075\024\023" +
    "\025\104\026\077\032\103\044\070\047\102\001\002\000" +
    "\022\013\073\014\075\024\023\025\104\026\077\032\103" +
    "\044\070\047\102\001\002\000\022\013\073\014\075\024" +
    "\023\025\104\026\077\032\103\044\070\047\102\001\002" +
    "\000\040\011\uffcf\033\uffcf\034\uffcf\043\115\044\107\045" +
    "\120\046\110\050\106\051\uffcf\052\121\053\111\054\116" +
    "\055\113\056\112\057\114\001\002\000\024\011\uffce\033" +
    "\uffce\034\uffce\043\115\044\107\045\120\046\110\050\uffce" +
    "\051\uffce\001\002\000\040\011\uffd3\033\uffd3\034\uffd3\043" +
    "\uffd3\044\uffd3\045\uffd3\046\uffd3\050\uffd3\051\uffd3\052\uffd3" +
    "\053\uffd3\054\uffd3\055\uffd3\056\uffd3\057\uffd3\001\002\000" +
    "\024\011\uffcc\033\uffcc\034\uffcc\043\115\044\107\045\120" +
    "\046\110\050\uffcc\051\uffcc\001\002\000\040\011\uffd5\033" +
    "\uffd5\034\uffd5\043\uffd5\044\uffd5\045\120\046\110\050\uffd5" +
    "\051\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5\057" +
    "\uffd5\001\002\000\024\011\uffc9\033\uffc9\034\uffc9\043\115" +
    "\044\107\045\120\046\110\050\uffc9\051\uffc9\001\002\000" +
    "\024\011\uffcb\033\uffcb\034\uffcb\043\115\044\107\045\120" +
    "\046\110\050\uffcb\051\uffcb\001\002\000\024\011\uffca\033" +
    "\uffca\034\uffca\043\115\044\107\045\120\046\110\050\uffca" +
    "\051\uffca\001\002\000\024\011\uffcd\033\uffcd\034\uffcd\043" +
    "\115\044\107\045\120\046\110\050\uffcd\051\uffcd\001\002" +
    "\000\040\011\uffd2\033\uffd2\034\uffd2\043\uffd2\044\uffd2\045" +
    "\uffd2\046\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2" +
    "\055\uffd2\056\uffd2\057\uffd2\001\002\000\040\011\uffd4\033" +
    "\uffd4\034\uffd4\043\uffd4\044\uffd4\045\120\046\110\050\uffd4" +
    "\051\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4\056\uffd4\057" +
    "\uffd4\001\002\000\040\011\uffd0\033\uffd0\034\uffd0\043\115" +
    "\044\107\045\120\046\110\050\uffd0\051\uffd0\052\121\053" +
    "\111\054\116\055\113\056\112\057\114\001\002\000\040" +
    "\011\uffd1\033\uffd1\034\uffd1\043\uffd1\044\uffd1\045\uffd1\046" +
    "\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1" +
    "\056\uffd1\057\uffd1\001\002\000\004\024\023\001\002\000" +
    "\022\013\073\014\075\024\023\025\104\026\077\032\103" +
    "\044\070\047\102\001\002\000\040\011\uffd7\033\uffd7\034" +
    "\uffd7\043\115\044\107\045\120\046\110\050\106\051\122" +
    "\052\121\053\111\054\116\055\113\056\112\057\114\001" +
    "\002\000\050\011\uffb6\033\uffb6\034\uffb6\036\uffb6\041\uffb6" +
    "\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6\050\uffb6\051" +
    "\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6" +
    "\060\uffb6\001\002\000\024\016\uffde\017\uffde\020\uffde\022" +
    "\uffde\023\uffde\024\uffde\027\uffde\061\uffde\062\uffde\001\002" +
    "\000\040\011\uffc8\033\uffc8\034\uffc8\043\uffc8\044\uffc8\045" +
    "\120\046\110\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8" +
    "\055\uffc8\056\uffc8\057\uffc8\001\002\000\024\016\uffdc\017" +
    "\uffdc\020\uffdc\022\uffdc\023\uffdc\024\uffdc\027\uffdc\061\uffdc" +
    "\062\uffdc\001\002\000\004\024\023\001\002\000\006\034" +
    "\152\036\140\001\002\000\006\034\uffb7\036\uffb7\001\002" +
    "\000\024\016\uffe4\017\uffe4\020\uffe4\022\uffe4\023\uffe4\024" +
    "\uffe4\027\uffe4\061\uffe4\062\uffe4\001\002\000\024\016\uffda" +
    "\017\uffda\020\uffda\022\uffda\023\uffda\024\uffda\027\uffda\061" +
    "\uffda\062\uffda\001\002\000\024\016\uffe7\017\uffe7\020\uffe7" +
    "\022\uffe7\023\uffe7\024\uffe7\027\uffe7\061\uffe7\062\uffe7\001" +
    "\002\000\004\034\160\001\002\000\004\034\157\001\002" +
    "\000\024\016\uffe6\017\uffe6\020\uffe6\022\uffe6\023\uffe6\024" +
    "\uffe6\027\uffe6\061\uffe6\062\uffe6\001\002\000\024\016\uffe5" +
    "\017\uffe5\020\uffe5\022\uffe5\023\uffe5\024\uffe5\027\uffe5\061" +
    "\uffe5\062\uffe5\001\002\000\022\013\073\014\075\024\023" +
    "\025\104\026\077\032\103\044\070\047\102\001\002\000" +
    "\034\033\163\043\115\044\107\045\120\046\110\050\106" +
    "\051\122\052\121\053\111\054\116\055\113\056\112\057" +
    "\114\001\002\000\004\030\164\001\002\000\036\004\ufff7" +
    "\010\ufff7\012\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\022" +
    "\ufff7\023\ufff7\024\ufff7\027\ufff7\031\ufff7\061\ufff7\062\ufff7" +
    "\001\002\000\036\004\011\010\013\012\033\015\045\016" +
    "\uffe8\017\uffe8\020\uffe8\022\uffe8\023\uffe8\024\uffe8\027\uffe8" +
    "\031\022\061\uffe8\062\uffe8\001\002\000\024\016\061\017" +
    "\053\020\054\022\050\023\064\024\023\027\167\061\066" +
    "\062\062\001\002\000\026\016\uffd9\017\uffd9\020\uffd9\021" +
    "\170\022\uffd9\023\uffd9\024\uffd9\027\uffd9\061\uffd9\062\uffd9" +
    "\001\002\000\004\030\171\001\002\000\036\004\ufff7\010" +
    "\ufff7\012\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\022\ufff7" +
    "\023\ufff7\024\ufff7\027\ufff7\031\ufff7\061\ufff7\062\ufff7\001" +
    "\002\000\036\004\011\010\013\012\033\015\045\016\uffe8" +
    "\017\uffe8\020\uffe8\022\uffe8\023\uffe8\024\uffe8\027\uffe8\031" +
    "\022\061\uffe8\062\uffe8\001\002\000\024\016\061\017\053" +
    "\020\054\022\050\023\064\024\023\027\174\061\066\062" +
    "\062\001\002\000\024\016\uffd8\017\uffd8\020\uffd8\022\uffd8" +
    "\023\uffd8\024\uffd8\027\uffd8\061\uffd8\062\uffd8\001\002\000" +
    "\022\013\073\014\075\024\023\025\104\026\077\032\103" +
    "\044\070\047\102\001\002\000\034\034\177\043\115\044" +
    "\107\045\120\046\110\050\106\051\122\052\121\053\111" +
    "\054\116\055\113\056\112\057\114\001\002\000\024\016" +
    "\uffe3\017\uffe3\020\uffe3\022\uffe3\023\uffe3\024\uffe3\027\uffe3" +
    "\061\uffe3\062\uffe3\001\002\000\024\013\073\014\075\024" +
    "\023\025\104\026\077\032\103\033\203\044\070\047\102" +
    "\001\002\000\036\011\uffbd\033\uffbd\043\115\044\107\045" +
    "\120\046\110\050\106\051\122\052\121\053\111\054\116" +
    "\055\113\056\112\057\114\001\002\000\006\011\204\033" +
    "\205\001\002\000\040\011\uffbf\033\uffbf\034\uffbf\043\uffbf" +
    "\044\uffbf\045\uffbf\046\uffbf\050\uffbf\051\uffbf\052\uffbf\053" +
    "\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf\001\002\000\022" +
    "\013\073\014\075\024\023\025\104\026\077\032\103\044" +
    "\070\047\102\001\002\000\040\011\uffbe\033\uffbe\034\uffbe" +
    "\043\uffbe\044\uffbe\045\uffbe\046\uffbe\050\uffbe\051\uffbe\052" +
    "\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\001\002" +
    "\000\036\011\uffbc\033\uffbc\043\115\044\107\045\120\046" +
    "\110\050\106\051\122\052\121\053\111\054\116\055\113" +
    "\056\112\057\114\001\002\000\004\032\210\001\002\000" +
    "\022\013\073\014\075\024\023\025\104\026\077\032\103" +
    "\044\070\047\102\001\002\000\034\033\212\043\115\044" +
    "\107\045\120\046\110\050\106\051\122\052\121\053\111" +
    "\054\116\055\113\056\112\057\114\001\002\000\004\030" +
    "\213\001\002\000\036\004\ufff7\010\ufff7\012\ufff7\015\ufff7" +
    "\016\ufff7\017\ufff7\020\ufff7\022\ufff7\023\ufff7\024\ufff7\027" +
    "\ufff7\031\ufff7\061\ufff7\062\ufff7\001\002\000\036\004\011" +
    "\010\013\012\033\015\045\016\uffe8\017\uffe8\020\uffe8\022" +
    "\uffe8\023\uffe8\024\uffe8\027\uffe8\031\022\061\uffe8\062\uffe8" +
    "\001\002\000\024\016\061\017\053\020\054\022\050\023" +
    "\064\024\023\027\216\061\066\062\062\001\002\000\024" +
    "\016\uffdf\017\uffdf\020\uffdf\022\uffdf\023\uffdf\024\uffdf\027" +
    "\uffdf\061\uffdf\062\uffdf\001\002\000\004\024\023\001\002" +
    "\000\004\034\221\001\002\000\040\002\ufff5\004\ufff5\010" +
    "\ufff5\012\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\022\ufff5" +
    "\023\ufff5\024\ufff5\027\ufff5\031\ufff5\061\ufff5\062\ufff5\001" +
    "\002\000\004\034\025\001\002\000\004\032\224\001\002" +
    "\000\004\033\225\001\002\000\004\030\226\001\002\000" +
    "\036\004\ufff7\010\ufff7\012\ufff7\015\ufff7\016\ufff7\017\ufff7" +
    "\020\ufff7\022\ufff7\023\ufff7\024\ufff7\027\ufff7\031\ufff7\061" +
    "\ufff7\062\ufff7\001\002\000\036\004\011\010\013\012\033" +
    "\015\045\016\uffe8\017\uffe8\020\uffe8\022\uffe8\023\uffe8\024" +
    "\uffe8\027\uffe8\031\022\061\uffe8\062\uffe8\001\002\000\024" +
    "\016\061\017\053\020\054\022\050\023\064\024\023\027" +
    "\231\061\066\062\062\001\002\000\004\002\uffee\001\002" +
    "\000\006\024\023\030\233\001\002\000\014\004\011\010" +
    "\013\012\033\015\045\031\022\001\002\000\016\004\011" +
    "\010\013\012\033\015\045\027\237\031\022\001\002\000" +
    "\016\004\ufff1\010\ufff1\012\ufff1\015\ufff1\027\ufff1\031\ufff1" +
    "\001\002\000\016\004\ufff2\010\ufff2\012\ufff2\015\ufff2\027" +
    "\ufff2\031\ufff2\001\002\000\004\034\240\001\002\000\016" +
    "\002\ufff3\004\ufff3\010\ufff3\012\ufff3\015\ufff3\031\ufff3\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\236\000\006\002\004\003\003\001\001\000\016\004" +
    "\016\007\007\010\017\011\020\017\011\027\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\231\001\001\000\002\001\001\000" +
    "\004\031\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\025\001\001\000\002\001\001\000\004\016\041" +
    "\001\001\000\010\014\031\015\033\027\030\001\001\000" +
    "\002\001\001\000\004\031\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\014\035\015" +
    "\033\027\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\042\001\001\000\002\001" +
    "\001\000\010\007\045\020\046\027\043\001\001\000\004" +
    "\031\221\001\001\000\004\031\216\001\001\000\002\001" +
    "\001\000\020\021\051\022\055\025\056\030\054\031\050" +
    "\033\064\034\062\001\001\000\004\035\206\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\022\075\023\071\024\070\025" +
    "\077\030\073\031\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\022\075\023\144\024" +
    "\070\025\077\030\073\031\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\022\075\023\136\024" +
    "\070\025\077\030\073\031\050\001\001\000\016\022\075" +
    "\023\104\024\070\025\077\030\073\031\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\022\075\023\135" +
    "\024\070\025\077\030\073\031\050\001\001\000\016\022" +
    "\075\023\134\024\070\025\077\030\073\031\050\001\001" +
    "\000\016\022\075\023\133\024\070\025\077\030\073\031" +
    "\050\001\001\000\016\022\075\023\132\024\070\025\077" +
    "\030\073\031\050\001\001\000\016\022\075\023\131\024" +
    "\070\025\077\030\073\031\050\001\001\000\016\022\075" +
    "\023\130\024\070\025\077\030\073\031\050\001\001\000" +
    "\016\022\075\023\127\024\070\025\077\030\073\031\050" +
    "\001\001\000\016\022\075\023\126\024\070\025\077\030" +
    "\073\031\050\001\001\000\016\022\075\023\125\024\070" +
    "\025\077\030\073\031\050\001\001\000\002\001\001\000" +
    "\016\022\075\023\124\024\070\025\077\030\073\031\050" +
    "\001\001\000\016\022\075\023\123\024\070\025\077\030" +
    "\073\031\050\001\001\000\016\022\075\023\122\024\070" +
    "\025\077\030\073\031\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\142\001" +
    "\001\000\016\022\075\023\141\024\070\025\077\030\073" +
    "\031\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\030\147\031\150\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\022\075\023\161\024\070\025\077" +
    "\030\073\031\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\164\001\001\000\010\007\045\020\165" +
    "\027\043\001\001\000\020\021\051\022\055\025\056\030" +
    "\054\031\050\033\064\034\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\171\001\001\000\010\007" +
    "\045\020\172\027\043\001\001\000\020\021\051\022\055" +
    "\025\056\030\054\031\050\033\064\034\062\001\001\000" +
    "\002\001\001\000\016\022\075\023\175\024\070\025\077" +
    "\030\073\031\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\022\075\023\200\024\070\025\077\026\201" +
    "\030\073\031\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\022\075\023\205\024\070" +
    "\025\077\030\073\031\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\022\075\023\210" +
    "\024\070\025\077\030\073\031\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\213\001\001\000\010" +
    "\007\045\020\214\027\043\001\001\000\020\021\051\022" +
    "\055\025\056\030\054\031\050\033\064\034\062\001\001" +
    "\000\002\001\001\000\004\031\217\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\226\001" +
    "\001\000\010\007\045\020\227\027\043\001\001\000\020" +
    "\021\051\022\055\025\056\030\054\031\050\033\064\034" +
    "\062\001\001\000\002\001\001\000\004\031\217\001\001" +
    "\000\010\007\234\012\233\027\043\001\001\000\006\007" +
    "\235\027\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public static void main(String args[]) throws Exception{
		new parser(new Yylex(System.in)).parse();
}
public void syntax_error(Symbol s){
System.out.println("Error en la linea "+(s.right+1)+"Columna"+s.left+" .Identificador "+s.value+" no reconocido ");
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


ArrayList<CNode> l=new ArrayList<CNode>();
ArrayList<String> boolexp=new ArrayList<String>();
LinkedList<CNode> list=new LinkedList<CNode>();
LinkedList<CNode> breakList=new LinkedList<CNode>();
LinkedList<CNode> continueList=new LinkedList<CNode>();
LinkedList<CNode> returnList=new LinkedList<CNode>();
LinkedList<CNode> fnList=new LinkedList<CNode>();
/*NECESITO SABER SI ESTOY EN UN WHILE DENTRO DE OTRO*/
Stack <String> whileNames =new Stack<String>();
Stack <String> fnNames =new Stack<String>();
String actualWhile="";

CNode program;
int contif=0;
int label=0;
int whileLabel=0;

int label(){
    label++;
    return label;
}


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // id ::= ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=i;

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // loc ::= loc DOT id 
            {
              CNode RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CNode lc = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loc",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // loc ::= id 
            {
              CNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new CNode(label(),""+i);
                   RESULT.idVar();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loc",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // type ::= FLOAT 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT="float";
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // type ::= VOID 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT="void";
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // type ::= BOOL 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                RESULT="boolean";
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // type ::= INT 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                RESULT="int";
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // actualList ::= actualList COMA exp 
            {
              CNode RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CNode al = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode e = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   RESULT=new CNode(al.getSingleCodeLine()+","+e.getSingleCodeLine());
                   RESULT.mergeUses(al,e);

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualList",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // actualList ::= exp 
            {
              CNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode e = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                   RESULT=e;
                   RESULT.addUse(e.getSingleCodeLine());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualList",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // fncall ::= id LPAREN actualList RPAREN 
            {
              CNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CNode al = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    RESULT=new CNode(label(),"function "+i+"( "+al.getSingleCodeLine()+" )");
                    RESULT.mergeUses(al);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fncall",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // fncall ::= id LPAREN RPAREN 
            {
              CNode RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String idd = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                    RESULT=new CNode(label(),"function "+idd+" ( ) ");


                    
                                
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fncall",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // term ::= fncall 
            {
              CNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode f = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=f;
               // f.setType(7);                   
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // term ::= LPAREN exp RPAREN 
            {
              CNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CNode e = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    RESULT=new CNode(label(),e.getSingleCodeLine());
                    RESULT.mergeUses(e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // term ::= FALSE 
            {
              CNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new CNode(label(),"false");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // term ::= TRUE 
            {
              CNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT=new CNode(label(),"true");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // term ::= STRINGLITERAL 
            {
              CNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT=new CNode(label(),""+s);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // term ::= INTLITERAL 
            {
              CNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                RESULT=new CNode(label(),""+i);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // term ::= loc 
            {
              CNode RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode lc = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=lc;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp ::= term 
            {
              CNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode t = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT= t;
                    if(RESULT.isId()){
                        RESULT.addUse(t.getSingleCodeLine());
                    }
                    
                 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp ::= MINUS exp 
            {
              CNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode e = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                   RESULT=new CNode(label(),"-"+e.getSingleCodeLine());
                   RESULT.mergeUses(e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= exp GREATEREQ exp 
            {
              CNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CNode e1 = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode e2 = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new CNode(label(),e1.getSingleCodeLine()+">="+e2.getSingleCodeLine());
                   RESULT.mergeUses(e1,e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= exp LESSEQ exp 
            {
              CNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CNode e1 = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode e2 = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new CNode(label(),e1.getSingleCodeLine()+"<="+e2.getSingleCodeLine());
                    RESULT.mergeUses(e1,e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= exp GREATER exp 
            {
              CNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CNode e1 = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode e2 = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                     RESULT=new CNode(label(),e1.getSingleCodeLine()+">"+e2.getSingleCodeLine());
                    RESULT.mergeUses(e1,e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= exp LESS exp 
            {
              CNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CNode e1 = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode e2 = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                RESULT=new CNode(label(),e1.getSingleCodeLine()+"<"+e2.getSingleCodeLine());
                    RESULT.mergeUses(e1,e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= exp NOTEQUALS exp 
            {
              CNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CNode e1 = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode e2 = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                RESULT=new CNode(label(),e1.getSingleCodeLine()+"!="+e2.getSingleCodeLine());
                    RESULT.mergeUses(e1,e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= exp EQUALS exp 
            {
              CNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CNode e1 = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode e2 = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT=new CNode(label(),e1.getSingleCodeLine()+"=="+e2.getSingleCodeLine());
                    RESULT.mergeUses(e1,e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= exp OR exp 
            {
              CNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CNode e1 = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode e2 = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT=new CNode(label(),e1.getSingleCodeLine()+"|"+e2.getSingleCodeLine());
                    RESULT.mergeUses(e1,e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= exp AND exp 
            {
              CNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CNode e1 = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode e2 = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT=new CNode(label(),e1.getSingleCodeLine()+"&"+e2.getSingleCodeLine());
                    RESULT.mergeUses(e1,e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= NOT exp 
            {
              CNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode e = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT=new CNode(label(),"!"+e.getSingleCodeLine());
                    RESULT.mergeUses(e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= exp DIVIDE exp 
            {
              CNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CNode e1 = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode e2 = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT=new CNode(label(),e1.getSingleCodeLine()+"/"+e2.getSingleCodeLine());
                    RESULT.mergeUses(e1,e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= exp TIMES exp 
            {
              CNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CNode e1 = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode e2 = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT=new CNode(label(),e1.getSingleCodeLine()+"*"+e2.getSingleCodeLine());
                    RESULT.mergeUses(e1,e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= exp MINUS exp 
            {
              CNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CNode e1 = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode e2 = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                RESULT=new CNode(label(),e1.getSingleCodeLine()+"-"+e2.getSingleCodeLine());
                    RESULT.mergeUses(e1,e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= exp PLUS exp 
            {
              CNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CNode e1 = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode e2 = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                RESULT=new CNode(label(),e1.getSingleCodeLine()+"+"+e2.getSingleCodeLine());
                    RESULT.mergeUses(e1,e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= assignExp 
            {
              CNode RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode ae = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=ae;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // assignExp ::= loc ASSIGN exp 
            {
              CNode RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CNode lc = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode e = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                RESULT=new CNode(label(),lc.getSingleCodeLine()+"="+e.getSingleCodeLine());
                RESULT.mergeUses(e);
                RESULT.addDef(lc.getSingleCodeLine());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignExp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CIF2 ::= IF LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY ELSE LCURLY varDeclList stmtList RCURLY 
            {
              CNode RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String ii = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		CNode e = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vdltleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vdltright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		LinkedList<CNode> vdlt = (LinkedList<CNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sltleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int sltright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<CNode> slt = (LinkedList<CNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vdleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vdleright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<CNode> vdle = (LinkedList<CNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sleright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CNode> sle = (LinkedList<CNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        boolexp.add(e.getSingleCodeLine());
                        vdlt.addAll(slt);
                        vdle.addAll(sle);
                        for(int i=0;i<vdlt.size();i++){
                            if(i>0){
                                if(vdlt.get(i-1).getType()==0)
                                vdlt.get(i-1).setLeft(vdlt.get(i));
                            }
                        }
                         for(int i=0;i<vdle.size();i++){
                            if(i>0){
                                if(vdle.get(i-1).getType()==0)
                                vdle.get(i-1).setLeft(vdle.get(i));
                            }
                        }
                        RESULT=new CNode(label(),"IF "+e.getSingleCodeLine());
                        RESULT.mergeUses(e);
                        RESULT.setLeft(vdlt.get(0));
                        RESULT.setRight(vdle.get(0));
                        RESULT.setLastLeft(vdlt.get(vdlt.size()-1));
                        RESULT.setLastRight(vdle.get(vdle.size()-1));
                        RESULT.setType(2);


                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CIF2",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CIF1 ::= IF LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY 
            {
              CNode RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String ii = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		CNode e = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<CNode> vdl = (LinkedList<CNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CNode> sl = (LinkedList<CNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		                    
                      boolexp.add(e.getSingleCodeLine());
                      vdl.addAll(sl);
                      for(int i=0;i<vdl.size();i++){
                        if(i>0){
                            if(vdl.get(i-1).getType()==0)
                            vdl.get(i-1).setLeft(vdl.get(i));
                        }
                      }
                      RESULT=new CNode(label(),"IF "+e.getSingleCodeLine());
                      RESULT.mergeUses(e);
                      RESULT.setLeft(vdl.get(0));
                      RESULT.setType(1);
                      RESULT.setLastLeft(vdl.get(vdl.size()-1));
 


              CUP$parser$result = parser.getSymbolFactory().newSymbol("CIF1",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // stmt ::= fncall SEMICOLON 
            {
              CNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CNode f = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    
                    RESULT=f;
                    //RESULT.setType(7); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmt ::= RETURN SEMICOLON 
            {
              CNode RESULT =null;
		 
                    RESULT=new CNode(label(),"return ");
                    RESULT.setType(5);
                    returnList.addLast(RESULT);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt ::= CONTINUE SEMICOLON 
            {
              CNode RESULT =null;
		 
                    RESULT=new CNode(label(),"continue "+actualWhile);
                    RESULT.setType(6);
                    continueList.addLast(RESULT);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt ::= BREAK SEMICOLON 
            {
              CNode RESULT =null;
		 
                    RESULT=new CNode(label(),"break "+actualWhile);
                    RESULT.setType(4);
                    breakList.addLast(RESULT);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= RETURN exp SEMICOLON 
            {
              CNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CNode e = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    RESULT=new CNode(label(),"return "+e.getSingleCodeLine());
                    RESULT.mergeUses(e);
                    RESULT.setType(5);
                    returnList.addLast(RESULT);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= WHILE NT$0 LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY 
            {
              CNode RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (CNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		CNode e = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<CNode> vdl = (LinkedList<CNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CNode> sl = (LinkedList<CNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 

                        
                         boolexp.add(e.getSingleCodeLine());  
                         /*UNO LA LISTA DE VARDECL Y STMTLIST*/
                         vdl.addAll(sl);
                         /*UNO TODOS LOS NODOS DEL LIS.T*/
                         for(int i=0;i<vdl.size();i++){
                              if(i>0){
                                  if(vdl.get(i-1).getType()==0)
                                  vdl.get(i-1).setLeft(vdl.get(i));
                              }
                         }
                         RESULT=new CNode(label(),"WHILE "+e.getSingleCodeLine());
                         RESULT.mergeUses(e);
                         RESULT.setLeft(vdl.get(0));
                         RESULT.setType(3);
                         vdl.get(vdl.size()-1).setLeft(RESULT);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$0 ::= 
            {
              CNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
a="while"+whileLabel; actualWhile=a; whileLabel++; whileNames.push(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= CIF2 
            {
              CNode RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode ii = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT=ii;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= CIF1 
            {
              CNode RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode ii = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT=ii;label++;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= COUT WRITE exp SEMICOLON 
            {
              CNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CNode e = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		                   
                    RESULT=new CNode(label()," cout **"+e.getSingleCodeLine()+"**");
                    RESULT.mergeUses(e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= CIN READ loc SEMICOLON 
            {
              CNode RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CNode lc = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    RESULT=new CNode(label()," cin "+lc.getSingleCodeLine());
                    RESULT.addDef(lc.getSingleCodeLine());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= loc MINUSMINUS SEMICOLON 
            {
              CNode RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CNode lc = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                    RESULT=new CNode(label(),lc.getSingleCodeLine()+"--");
                    RESULT.addUse(lc.getSingleCodeLine());
                    RESULT.addDef(lc.getSingleCodeLine());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= loc PLUSPLUS SEMICOLON 
            {
              CNode RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CNode lc = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                    RESULT=new CNode(label(),lc.getSingleCodeLine() +"++");
                    RESULT.addUse(lc.getSingleCodeLine());
                    RESULT.addDef(lc.getSingleCodeLine());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt ::= assignExp SEMICOLON 
            {
              CNode RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CNode ae = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new CNode(label(),ae.getSingleCodeLine());
                    RESULT.mergeUses(ae);
                    RESULT.addDefList(ae);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmtList ::= 
            {
              LinkedList<CNode> RESULT =null;
		 
                   RESULT=new LinkedList<CNode>();
                   label++;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtList",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmtList ::= stmtList stmt 
            {
              LinkedList<CNode> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CNode> sl = (LinkedList<CNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode s = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                   /*--------------  -------------------------*/
                   sl.addLast(s);
                   if(s.getType()==2){
                    CNode union=new CNode(label(),"");
                    label++;
                    s.m_lastLeft.m_pLeftNode=union;
                    s.m_lastRight.m_pLeftNode=union;
                    sl.add(union);
                   }
                   if(s.getType()==1){
                    CNode union=new CNode(label(),"");
                    label++;
                    s.m_lastLeft.m_pLeftNode=union;
                    s.m_pRightNode=union;
                    sl.add(union);
                   }
                   if(s.getType()==3){
                    
                    String thisWhile="";
                    try{
                        if (!whileNames.isEmpty()){
                            thisWhile=whileNames.pop();
                            actualWhile=whileNames.peek();
                         }
                    }catch(Exception ex){
                        //JOptionPane.showMessageDialog(this, ex);
                     }
                    CNode union=new CNode(label(),"");
                    s.m_pRightNode=union;
                    sl.add(union);
                     /*MANDO LOS PUNTEROS DE LOS BREAKS AL FINAL DEL WHILE, al nodo UNION*/
                         if(!breakList.isEmpty()){
                            for(int i=0;i<breakList.size();i++){
                                    CNode actualBreak=breakList.get(i);
                                    if(actualBreak.getSingleCodeLine().contains(thisWhile)){
                                        actualBreak.m_pLeftNode=union;  
                                    }
                            }

                         }
                         if(!continueList.isEmpty()){
                            for(int i=0;i<continueList.size();i++){
                                    CNode actualContinue=continueList.get(i);
                                    if(actualContinue.getSingleCodeLine().contains(thisWhile)){
                                        actualContinue.m_pLeftNode=s;  
                                    }
                            }
                         }
                  
                   }
                   RESULT=sl;
                   
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtList",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // fnBody ::= LCURLY varDeclList stmtList RCURLY 
            {
              CNode RESULT =null;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<CNode> vdl = (LinkedList<CNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CNode> sl = (LinkedList<CNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    CNode last=new CNode(label(),"end function");
                    last.setType(7);
                    sl.addLast(last);
                    label++;
                    vdl.addAll(sl);
                    for(int i=0;i<vdl.size();i++){
                            if(i>0){
                                if(vdl.get(i-1).getType()==0)
                                vdl.get(i-1).setLeft(vdl.get(i));
                            }
                    }
                    RESULT=vdl.get(0);
                    RESULT.setLastLeft(vdl.get(vdl.size()-1));
                            
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fnBody",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // formalDecl ::= type id 
            {
              CNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new CNode(i);
                   RESULT.addDef(i);

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalDecl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // formalsList ::= formalDecl COMA formalsList 
            {
              CNode RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CNode fd = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode fl = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                   RESULT=new CNode(fd.getSingleCodeLine()+","+fl.getSingleCodeLine());
                   RESULT.addDef(fd.getSingleCodeLine());
                   RESULT.addDefList(fl);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalsList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // formalsList ::= formalDecl 
            {
              CNode RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode fd = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                   RESULT = fd;


                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalsList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // mainbody ::= VOID MAIN LPAREN RPAREN LCURLY varDeclList stmtList RCURLY 
            {
              String RESULT =null;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<CNode> vdl = (LinkedList<CNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CNode> sl = (LinkedList<CNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                        vdl.addAll(sl);
                        for(int i=0;i<vdl.size();i++){
                            if(i>0){
                                if(vdl.get(i-1).getType()==0)
                                vdl.get(i-1).setLeft(vdl.get(i));
                            }
                        }
                        CNode start=new CNode(label(),"start");
                        start.setType(9);
                        start.setLeft(vdl.get(0));
                        CNode end=new CNode(label(),"end");
                        end.setType(9);
                        vdl.get(vdl.size()-1).setLeft(end);
                        program=start;

                        for(CNode node:returnList){
                             node.setLeft(end);
                        }
                        returnList.clear();
                        list=vdl;

                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mainbody",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // formals ::= LPAREN formalsList RPAREN 
            {
              CNode RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CNode fl = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    RESULT=fl;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formals",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // formals ::= LPAREN RPAREN 
            {
              CNode RESULT =null;
		 
                    RESULT=new CNode ("");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formals",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // structBody ::= varDecl 
            {
              CNode RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode vd = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structBody",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // structBody ::= structBody varDecl 
            {
              CNode RESULT =null;
		int sbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CNode sb = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode vd = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                   
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structBody",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // structDecl ::= STRUCT id LCURLY structBody RCURLY SEMICOLON 
            {
              CNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CNode sb = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structDecl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // fnDecl ::= type id formals fnBody 
            {
              CNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CNode f = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode fb = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    CNode fnName=new CNode(label(),i+"("+f.getSingleCodeLine()+")");
                    fnName.setType(6);
                    fnName.addDefList(f);
                    fnName.setLeft(fb);
                    fnName.setLastLeft(fb.m_lastLeft);
                    fb.m_lastLeft.setType(6);
                    fnList.addLast(fnName);
                    for(CNode node:returnList){
                        node.setLeft(fb.m_lastLeft);
                    }
                    returnList.clear();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fnDecl",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // varDecl ::= STRUCT id id SEMICOLON 
            {
              CNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDecl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // varDecl ::= type id SEMICOLON 
            {
              CNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CNode(label(),t+" "+i);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDecl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // varDeclList ::= 
            {
              LinkedList<CNode> RESULT =null;
		 RESULT = new LinkedList<CNode>();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDeclList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // varDeclList ::= varDeclList varDecl 
            {
              LinkedList<CNode> RESULT =null;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CNode> vdl = (LinkedList<CNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode vd = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 vdl.addLast(vd);
                   RESULT = vdl;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDeclList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decl ::= structDecl 
            {
              CNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode s = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=s;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // decl ::= fnDecl 
            {
              CNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode f = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=f;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decl ::= varDecl 
            {
              CNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode v = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=v;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declList ::= 
            {
              CNode RESULT =null;
		 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declList ::= declList decl 
            {
              CNode RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CNode dl = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode d = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new CNode(label(),"");
                   
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= errorlex 
            {
              String RESULT =null;
		System.out.println("errorlex");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= declList mainbody 
            {
              String RESULT =null;
		    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= declList 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

