
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Apr 27 20:26:53 CDT 2017
//----------------------------------------------------

package scanner;

import java_cup.runtime.*;
import java.util.*;
import graphreduction.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Apr 27 20:26:53 CDT 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\122\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\003\000\002\003\004\000\002\003\002" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\005\004\000\002\005\002\000\002\007\005\000\002" +
    "\007\006\000\002\010\006\000\002\011\010\000\002\012" +
    "\004\000\002\012\003\000\002\013\004\000\002\013\005" +
    "\000\002\017\012\000\002\014\003\000\002\014\005\000" +
    "\002\015\004\000\002\016\006\000\002\020\004\000\002" +
    "\020\002\000\002\021\004\000\002\021\005\000\002\021" +
    "\005\000\002\021\006\000\002\021\006\000\002\021\003" +
    "\000\002\021\003\000\002\035\002\000\002\021\013\000" +
    "\002\036\002\000\002\021\017\000\002\021\005\000\002" +
    "\021\004\000\002\021\004\000\002\021\004\000\002\021" +
    "\004\000\002\033\012\000\002\034\017\000\002\022\005" +
    "\000\002\023\003\000\002\023\005\000\002\023\005\000" +
    "\002\023\004\000\002\023\004\000\002\023\005\000\002" +
    "\023\005\000\002\023\004\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\004\000\002\023\004\000\002\023\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\005\000\002\024\003" +
    "\000\002\025\005\000\002\025\006\000\002\026\003\000" +
    "\002\026\005\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\030\003\000\002\030" +
    "\005\000\002\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\020\002\ufffc\004\ufffc\005\006\010\ufffc\012" +
    "\ufffc\016\ufffc\032\ufffc\001\002\000\016\002\000\004\011" +
    "\010\013\012\015\016\014\032\022\001\002\000\004\002" +
    "\007\001\002\000\004\002\ufffe\001\002\000\004\002\001" +
    "\001\002\000\016\002\ufffb\004\ufffb\010\ufffb\012\ufffb\016" +
    "\ufffb\032\ufffb\001\002\000\006\006\253\025\uffb6\001\002" +
    "\000\004\002\uffff\001\002\000\004\025\uffb5\001\002\000" +
    "\004\025\023\001\002\000\004\025\uffb4\001\002\000\004" +
    "\025\023\001\002\000\016\002\ufffd\004\ufffd\010\ufffd\012" +
    "\ufffd\016\ufffd\032\ufffd\001\002\000\016\002\ufffa\004\ufffa" +
    "\010\ufffa\012\ufffa\016\ufffa\032\ufffa\001\002\000\016\002" +
    "\ufff9\004\ufff9\010\ufff9\012\ufff9\016\ufff9\032\ufff9\001\002" +
    "\000\004\025\uffb3\001\002\000\056\011\uffb0\025\uffb0\031" +
    "\uffb0\033\uffb0\034\uffb0\035\uffb0\037\uffb0\042\uffb0\043\uffb0" +
    "\044\uffb0\045\uffb0\046\uffb0\047\uffb0\051\uffb0\052\uffb0\053" +
    "\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0" +
    "\001\002\000\006\033\027\035\025\001\002\000\042\002" +
    "\ufff6\004\ufff6\007\ufff6\010\ufff6\012\ufff6\016\ufff6\017\ufff6" +
    "\020\ufff6\021\ufff6\023\ufff6\024\ufff6\025\ufff6\030\ufff6\032" +
    "\ufff6\062\ufff6\063\ufff6\001\002\000\004\031\041\001\002" +
    "\000\014\004\033\010\013\012\015\032\022\034\030\001" +
    "\002\000\004\031\ufff0\001\002\000\004\025\023\001\002" +
    "\000\004\034\037\001\002\000\004\025\uffb6\001\002\000" +
    "\006\011\035\034\uffed\001\002\000\012\004\033\010\013" +
    "\012\015\032\022\001\002\000\004\034\uffec\001\002\000" +
    "\004\031\uffef\001\002\000\006\011\uffeb\034\uffeb\001\002" +
    "\000\040\004\ufff7\007\ufff7\010\ufff7\012\ufff7\016\ufff7\017" +
    "\ufff7\020\ufff7\021\ufff7\023\ufff7\024\ufff7\025\ufff7\030\ufff7" +
    "\032\ufff7\062\ufff7\063\ufff7\001\002\000\016\002\ufff4\004" +
    "\ufff4\010\ufff4\012\ufff4\016\ufff4\032\ufff4\001\002\000\040" +
    "\004\033\007\uffe8\010\013\012\015\016\045\017\uffe8\020" +
    "\uffe8\021\uffe8\023\uffe8\024\uffe8\025\uffe8\030\uffe8\032\022" +
    "\062\uffe8\063\uffe8\001\002\000\004\025\023\001\002\000" +
    "\004\025\023\001\002\000\040\004\ufff8\007\ufff8\010\ufff8" +
    "\012\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\023\ufff8\024" +
    "\ufff8\025\ufff8\030\ufff8\032\ufff8\062\ufff8\063\ufff8\001\002" +
    "\000\026\007\052\017\062\020\054\021\056\023\050\024" +
    "\065\025\023\030\061\062\067\063\064\001\002\000\004" +
    "\033\uffe0\001\002\000\052\011\uffb2\033\221\034\uffb2\035" +
    "\uffb2\037\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2" +
    "\047\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2\056" +
    "\uffb2\057\uffb2\060\uffb2\061\uffb2\001\002\000\004\033\uffde" +
    "\001\002\000\026\007\uffe9\017\uffe9\020\uffe9\021\uffe9\023" +
    "\uffe9\024\uffe9\025\uffe9\030\uffe9\062\uffe9\063\uffe9\001\002" +
    "\000\004\040\202\001\002\000\012\037\146\042\177\043" +
    "\176\061\145\001\002\000\004\033\162\001\002\000\004" +
    "\035\161\001\002\000\004\035\160\001\002\000\016\002" +
    "\uffea\004\uffea\010\uffea\012\uffea\016\uffea\032\uffea\001\002" +
    "\000\004\041\154\001\002\000\026\007\uffe1\017\uffe1\020" +
    "\uffe1\021\uffe1\023\uffe1\024\uffe1\025\uffe1\030\uffe1\062\uffe1" +
    "\063\uffe1\001\002\000\004\035\153\001\002\000\026\013" +
    "\100\014\074\015\076\025\023\026\106\027\101\033\105" +
    "\035\103\045\071\050\104\001\002\000\026\007\uffe2\017" +
    "\uffe2\020\uffe2\021\uffe2\023\uffe2\024\uffe2\025\uffe2\030\uffe2" +
    "\062\uffe2\063\uffe2\001\002\000\004\035\070\001\002\000" +
    "\026\007\uffdb\017\uffdb\020\uffdb\021\uffdb\023\uffdb\024\uffdb" +
    "\025\uffdb\030\uffdb\062\uffdb\063\uffdb\001\002\000\024\013" +
    "\100\014\074\015\076\025\023\026\106\027\101\033\105" +
    "\045\071\050\104\001\002\000\040\011\uffc2\034\uffc2\035" +
    "\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\051\uffc2\052\uffc2" +
    "\053\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2\001" +
    "\002\000\034\035\151\044\117\045\110\046\122\047\112" +
    "\051\111\052\124\053\123\054\113\055\120\056\115\057" +
    "\114\060\116\001\002\000\040\011\uffbe\034\uffbe\035\uffbe" +
    "\044\uffbe\045\uffbe\046\uffbe\047\uffbe\051\uffbe\052\uffbe\053" +
    "\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe\001\002" +
    "\000\050\011\uffc1\034\uffc1\035\uffc1\037\146\042\144\043" +
    "\143\044\uffc1\045\uffc1\046\uffc1\047\uffc1\051\uffc1\052\uffc1" +
    "\053\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1\061" +
    "\145\001\002\000\040\011\uffbd\034\uffbd\035\uffbd\044\uffbd" +
    "\045\uffbd\046\uffbd\047\uffbd\051\uffbd\052\uffbd\053\uffbd\054" +
    "\uffbd\055\uffbd\056\uffbd\057\uffbd\060\uffbd\001\002\000\040" +
    "\011\uffd4\034\uffd4\035\uffd4\044\uffd4\045\uffd4\046\uffd4\047" +
    "\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4\056\uffd4" +
    "\057\uffd4\060\uffd4\001\002\000\024\013\100\014\074\015" +
    "\076\025\023\026\106\027\101\033\105\045\071\050\104" +
    "\001\002\000\040\011\uffbf\034\uffbf\035\uffbf\044\uffbf\045" +
    "\uffbf\046\uffbf\047\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf" +
    "\055\uffbf\056\uffbf\057\uffbf\060\uffbf\001\002\000\040\011" +
    "\uffbb\034\uffbb\035\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb" +
    "\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb\057" +
    "\uffbb\060\uffbb\001\002\000\026\007\uffd9\017\uffd9\020\uffd9" +
    "\021\uffd9\023\uffd9\024\uffd9\025\uffd9\030\uffd9\062\uffd9\063" +
    "\uffd9\001\002\000\024\013\100\014\074\015\076\025\023" +
    "\026\106\027\101\033\105\045\071\050\104\001\002\000" +
    "\024\013\100\014\074\015\076\025\023\026\106\027\101" +
    "\033\105\045\071\050\104\001\002\000\040\011\uffc0\034" +
    "\uffc0\035\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\051\uffc0" +
    "\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0\060" +
    "\uffc0\001\002\000\034\034\121\044\117\045\110\046\122" +
    "\047\112\051\111\052\124\053\123\054\113\055\120\056" +
    "\115\057\114\060\116\001\002\000\024\013\100\014\074" +
    "\015\076\025\023\026\106\027\101\033\105\045\071\050" +
    "\104\001\002\000\024\013\100\014\074\015\076\025\023" +
    "\026\106\027\101\033\105\045\071\050\104\001\002\000" +
    "\024\013\100\014\074\015\076\025\023\026\106\027\101" +
    "\033\105\045\071\050\104\001\002\000\024\013\100\014" +
    "\074\015\076\025\023\026\106\027\101\033\105\045\071" +
    "\050\104\001\002\000\024\013\100\014\074\015\076\025" +
    "\023\026\106\027\101\033\105\045\071\050\104\001\002" +
    "\000\024\013\100\014\074\015\076\025\023\026\106\027" +
    "\101\033\105\045\071\050\104\001\002\000\024\013\100" +
    "\014\074\015\076\025\023\026\106\027\101\033\105\045" +
    "\071\050\104\001\002\000\024\013\100\014\074\015\076" +
    "\025\023\026\106\027\101\033\105\045\071\050\104\001" +
    "\002\000\024\013\100\014\074\015\076\025\023\026\106" +
    "\027\101\033\105\045\071\050\104\001\002\000\040\011" +
    "\uffbc\034\uffbc\035\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc" +
    "\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057" +
    "\uffbc\060\uffbc\001\002\000\024\013\100\014\074\015\076" +
    "\025\023\026\106\027\101\033\105\045\071\050\104\001" +
    "\002\000\024\013\100\014\074\015\076\025\023\026\106" +
    "\027\101\033\105\045\071\050\104\001\002\000\024\013" +
    "\100\014\074\015\076\025\023\026\106\027\101\033\105" +
    "\045\071\050\104\001\002\000\040\011\uffcb\034\uffcb\035" +
    "\uffcb\044\117\045\110\046\122\047\112\051\111\052\uffcb" +
    "\053\123\054\113\055\120\056\115\057\114\060\116\001" +
    "\002\000\024\011\uffca\034\uffca\035\uffca\044\117\045\110" +
    "\046\122\047\112\051\uffca\052\uffca\001\002\000\040\011" +
    "\uffcf\034\uffcf\035\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf" +
    "\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf\057" +
    "\uffcf\060\uffcf\001\002\000\024\011\uffc8\034\uffc8\035\uffc8" +
    "\044\117\045\110\046\122\047\112\051\uffc8\052\uffc8\001" +
    "\002\000\040\011\uffd3\034\uffd3\035\uffd3\044\uffd3\045\uffd3" +
    "\046\122\047\112\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055" +
    "\uffd3\056\uffd3\057\uffd3\060\uffd3\001\002\000\024\011\uffc5" +
    "\034\uffc5\035\uffc5\044\117\045\110\046\122\047\112\051" +
    "\uffc5\052\uffc5\001\002\000\024\011\uffc7\034\uffc7\035\uffc7" +
    "\044\117\045\110\046\122\047\112\051\uffc7\052\uffc7\001" +
    "\002\000\024\011\uffc6\034\uffc6\035\uffc6\044\117\045\110" +
    "\046\122\047\112\051\uffc6\052\uffc6\001\002\000\024\011" +
    "\uffc9\034\uffc9\035\uffc9\044\117\045\110\046\122\047\112" +
    "\051\uffc9\052\uffc9\001\002\000\040\011\uffce\034\uffce\035" +
    "\uffce\044\uffce\045\uffce\046\uffce\047\uffce\051\uffce\052\uffce" +
    "\053\uffce\054\uffce\055\uffce\056\uffce\057\uffce\060\uffce\001" +
    "\002\000\040\011\uffcc\034\uffcc\035\uffcc\044\117\045\110" +
    "\046\122\047\112\051\uffcc\052\uffcc\053\123\054\113\055" +
    "\120\056\115\057\114\060\116\001\002\000\040\011\uffd2" +
    "\034\uffd2\035\uffd2\044\uffd2\045\uffd2\046\122\047\112\051" +
    "\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2" +
    "\060\uffd2\001\002\000\040\011\uffcd\034\uffcd\035\uffcd\044" +
    "\uffcd\045\uffcd\046\uffcd\047\uffcd\051\uffcd\052\uffcd\053\uffcd" +
    "\054\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd\001\002\000" +
    "\040\011\uffc3\034\uffc3\035\uffc3\044\117\045\110\046\122" +
    "\047\112\051\111\052\124\053\123\054\113\055\120\056" +
    "\115\057\114\060\116\001\002\000\040\011\uffd0\034\uffd0" +
    "\035\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\051\uffd0\052" +
    "\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0" +
    "\001\002\000\040\011\uffd1\034\uffd1\035\uffd1\044\uffd1\045" +
    "\uffd1\046\uffd1\047\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1" +
    "\055\uffd1\056\uffd1\057\uffd1\060\uffd1\001\002\000\024\013" +
    "\100\014\074\015\076\025\023\026\106\027\101\033\105" +
    "\045\071\050\104\001\002\000\004\025\023\001\002\000" +
    "\050\011\uffb1\034\uffb1\035\uffb1\037\uffb1\042\uffb1\043\uffb1" +
    "\044\uffb1\045\uffb1\046\uffb1\047\uffb1\051\uffb1\052\uffb1\053" +
    "\uffb1\054\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1" +
    "\001\002\000\040\011\uffd5\034\uffd5\035\uffd5\044\117\045" +
    "\110\046\122\047\112\051\111\052\124\053\123\054\113" +
    "\055\120\056\115\057\114\060\116\001\002\000\026\007" +
    "\uffdc\017\uffdc\020\uffdc\021\uffdc\023\uffdc\024\uffdc\025\uffdc" +
    "\030\uffdc\062\uffdc\063\uffdc\001\002\000\040\011\uffc4\034" +
    "\uffc4\035\uffc4\044\uffc4\045\uffc4\046\122\047\112\051\uffc4" +
    "\052\uffc4\053\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4\060" +
    "\uffc4\001\002\000\026\007\uffda\017\uffda\020\uffda\021\uffda" +
    "\023\uffda\024\uffda\025\uffda\030\uffda\062\uffda\063\uffda\001" +
    "\002\000\004\025\023\001\002\000\006\035\157\037\146" +
    "\001\002\000\006\035\uffb2\037\uffb2\001\002\000\026\007" +
    "\uffe4\017\uffe4\020\uffe4\021\uffe4\023\uffe4\024\uffe4\025\uffe4" +
    "\030\uffe4\062\uffe4\063\uffe4\001\002\000\026\007\uffd8\017" +
    "\uffd8\020\uffd8\021\uffd8\023\uffd8\024\uffd8\025\uffd8\030\uffd8" +
    "\062\uffd8\063\uffd8\001\002\000\026\007\uffe7\017\uffe7\020" +
    "\uffe7\021\uffe7\023\uffe7\024\uffe7\025\uffe7\030\uffe7\062\uffe7" +
    "\063\uffe7\001\002\000\024\013\100\014\074\015\076\025" +
    "\023\026\106\027\101\033\105\045\071\050\104\001\002" +
    "\000\034\034\164\044\117\045\110\046\122\047\112\051" +
    "\111\052\124\053\123\054\113\055\120\056\115\057\114" +
    "\060\116\001\002\000\004\031\165\001\002\000\040\004" +
    "\ufff7\007\ufff7\010\ufff7\012\ufff7\016\ufff7\017\ufff7\020\ufff7" +
    "\021\ufff7\023\ufff7\024\ufff7\025\ufff7\030\ufff7\032\ufff7\062" +
    "\ufff7\063\ufff7\001\002\000\040\004\033\007\uffe8\010\013" +
    "\012\015\016\045\017\uffe8\020\uffe8\021\uffe8\023\uffe8\024" +
    "\uffe8\025\uffe8\030\uffe8\032\022\062\uffe8\063\uffe8\001\002" +
    "\000\026\007\052\017\062\020\054\021\056\023\050\024" +
    "\065\025\023\030\170\062\067\063\064\001\002\000\030" +
    "\007\uffd7\017\uffd7\020\uffd7\021\uffd7\022\171\023\uffd7\024" +
    "\uffd7\025\uffd7\030\uffd7\062\uffd7\063\uffd7\001\002\000\004" +
    "\031\172\001\002\000\040\004\ufff7\007\ufff7\010\ufff7\012" +
    "\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7\023\ufff7\024\ufff7" +
    "\025\ufff7\030\ufff7\032\ufff7\062\ufff7\063\ufff7\001\002\000" +
    "\040\004\033\007\uffe8\010\013\012\015\016\045\017\uffe8" +
    "\020\uffe8\021\uffe8\023\uffe8\024\uffe8\025\uffe8\030\uffe8\032" +
    "\022\062\uffe8\063\uffe8\001\002\000\026\007\052\017\062" +
    "\020\054\021\056\023\050\024\065\025\023\030\175\062" +
    "\067\063\064\001\002\000\026\007\uffd6\017\uffd6\020\uffd6" +
    "\021\uffd6\023\uffd6\024\uffd6\025\uffd6\030\uffd6\062\uffd6\063" +
    "\uffd6\001\002\000\004\035\201\001\002\000\004\035\200" +
    "\001\002\000\026\007\uffe6\017\uffe6\020\uffe6\021\uffe6\023" +
    "\uffe6\024\uffe6\025\uffe6\030\uffe6\062\uffe6\063\uffe6\001\002" +
    "\000\026\007\uffe5\017\uffe5\020\uffe5\021\uffe5\023\uffe5\024" +
    "\uffe5\025\uffe5\030\uffe5\062\uffe5\063\uffe5\001\002\000\024" +
    "\013\100\014\074\015\076\025\023\026\106\027\101\033" +
    "\105\045\071\050\104\001\002\000\034\035\204\044\117" +
    "\045\110\046\122\047\112\051\111\052\124\053\123\054" +
    "\113\055\120\056\115\057\114\060\116\001\002\000\026" +
    "\007\uffe3\017\uffe3\020\uffe3\021\uffe3\023\uffe3\024\uffe3\025" +
    "\uffe3\030\uffe3\062\uffe3\063\uffe3\001\002\000\004\033\206" +
    "\001\002\000\024\013\100\014\074\015\076\025\023\026" +
    "\106\027\101\033\105\045\071\050\104\001\002\000\034" +
    "\035\210\044\117\045\110\046\122\047\112\051\111\052" +
    "\124\053\123\054\113\055\120\056\115\057\114\060\116" +
    "\001\002\000\024\013\100\014\074\015\076\025\023\026" +
    "\106\027\101\033\105\045\071\050\104\001\002\000\034" +
    "\035\212\044\117\045\110\046\122\047\112\051\111\052" +
    "\124\053\123\054\113\055\120\056\115\057\114\060\116" +
    "\001\002\000\024\013\100\014\074\015\076\025\023\026" +
    "\106\027\101\033\105\045\071\050\104\001\002\000\034" +
    "\034\214\044\117\045\110\046\122\047\112\051\111\052" +
    "\124\053\123\054\113\055\120\056\115\057\114\060\116" +
    "\001\002\000\004\031\215\001\002\000\040\004\ufff7\007" +
    "\ufff7\010\ufff7\012\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7" +
    "\023\ufff7\024\ufff7\025\ufff7\030\ufff7\032\ufff7\062\ufff7\063" +
    "\ufff7\001\002\000\040\004\033\007\uffe8\010\013\012\015" +
    "\016\045\017\uffe8\020\uffe8\021\uffe8\023\uffe8\024\uffe8\025" +
    "\uffe8\030\uffe8\032\022\062\uffe8\063\uffe8\001\002\000\026" +
    "\007\052\017\062\020\054\021\056\023\050\024\065\025" +
    "\023\030\220\062\067\063\064\001\002\000\026\007\uffdd" +
    "\017\uffdd\020\uffdd\021\uffdd\023\uffdd\024\uffdd\025\uffdd\030" +
    "\uffdd\062\uffdd\063\uffdd\001\002\000\026\013\100\014\074" +
    "\015\076\025\023\026\106\027\101\033\105\034\224\045" +
    "\071\050\104\001\002\000\036\011\uffb8\034\uffb8\044\117" +
    "\045\110\046\122\047\112\051\111\052\124\053\123\054" +
    "\113\055\120\056\115\057\114\060\116\001\002\000\006" +
    "\011\225\034\226\001\002\000\040\011\uffba\034\uffba\035" +
    "\uffba\044\uffba\045\uffba\046\uffba\047\uffba\051\uffba\052\uffba" +
    "\053\uffba\054\uffba\055\uffba\056\uffba\057\uffba\060\uffba\001" +
    "\002\000\024\013\100\014\074\015\076\025\023\026\106" +
    "\027\101\033\105\045\071\050\104\001\002\000\040\011" +
    "\uffb9\034\uffb9\035\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9" +
    "\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9\057" +
    "\uffb9\060\uffb9\001\002\000\036\011\uffb7\034\uffb7\044\117" +
    "\045\110\046\122\047\112\051\111\052\124\053\123\054" +
    "\113\055\120\056\115\057\114\060\116\001\002\000\004" +
    "\033\231\001\002\000\024\013\100\014\074\015\076\025" +
    "\023\026\106\027\101\033\105\045\071\050\104\001\002" +
    "\000\034\034\233\044\117\045\110\046\122\047\112\051" +
    "\111\052\124\053\123\054\113\055\120\056\115\057\114" +
    "\060\116\001\002\000\004\031\234\001\002\000\040\004" +
    "\ufff7\007\ufff7\010\ufff7\012\ufff7\016\ufff7\017\ufff7\020\ufff7" +
    "\021\ufff7\023\ufff7\024\ufff7\025\ufff7\030\ufff7\032\ufff7\062" +
    "\ufff7\063\ufff7\001\002\000\040\004\033\007\uffe8\010\013" +
    "\012\015\016\045\017\uffe8\020\uffe8\021\uffe8\023\uffe8\024" +
    "\uffe8\025\uffe8\030\uffe8\032\022\062\uffe8\063\uffe8\001\002" +
    "\000\026\007\052\017\062\020\054\021\056\023\050\024" +
    "\065\025\023\030\237\062\067\063\064\001\002\000\026" +
    "\007\uffdf\017\uffdf\020\uffdf\021\uffdf\023\uffdf\024\uffdf\025" +
    "\uffdf\030\uffdf\062\uffdf\063\uffdf\001\002\000\004\025\023" +
    "\001\002\000\004\035\242\001\002\000\042\002\ufff5\004" +
    "\ufff5\007\ufff5\010\ufff5\012\ufff5\016\ufff5\017\ufff5\020\ufff5" +
    "\021\ufff5\023\ufff5\024\ufff5\025\ufff5\030\ufff5\032\ufff5\062" +
    "\ufff5\063\ufff5\001\002\000\004\035\025\001\002\000\006" +
    "\025\023\031\245\001\002\000\014\004\033\010\013\012" +
    "\015\016\045\032\022\001\002\000\016\004\033\010\013" +
    "\012\015\016\045\030\251\032\022\001\002\000\016\004" +
    "\ufff1\010\ufff1\012\ufff1\016\ufff1\030\ufff1\032\ufff1\001\002" +
    "\000\016\004\ufff2\010\ufff2\012\ufff2\016\ufff2\030\ufff2\032" +
    "\ufff2\001\002\000\004\035\252\001\002\000\016\002\ufff3" +
    "\004\ufff3\010\ufff3\012\ufff3\016\ufff3\032\ufff3\001\002\000" +
    "\004\033\254\001\002\000\004\034\255\001\002\000\004" +
    "\031\256\001\002\000\040\004\ufff7\007\ufff7\010\ufff7\012" +
    "\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7\023\ufff7\024\ufff7" +
    "\025\ufff7\030\ufff7\032\ufff7\062\ufff7\063\ufff7\001\002\000" +
    "\040\004\033\007\uffe8\010\013\012\015\016\045\017\uffe8" +
    "\020\uffe8\021\uffe8\023\uffe8\024\uffe8\025\uffe8\030\uffe8\032" +
    "\022\062\uffe8\063\uffe8\001\002\000\026\007\052\017\062" +
    "\020\054\021\056\023\050\024\065\025\023\030\261\062" +
    "\067\063\064\001\002\000\004\002\uffee\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\006\002\004\003\003\001\001\000\016\004" +
    "\016\007\007\010\017\011\020\017\011\027\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\243\001\001\000\002\001\001\000" +
    "\004\031\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\025\001\001\000\002\001\001\000\004\016\041" +
    "\001\001\000\010\014\031\015\033\027\030\001\001\000" +
    "\002\001\001\000\004\031\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\014\035\015" +
    "\033\027\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\042\001\001\000\002\001" +
    "\001\000\010\007\045\020\046\027\043\001\001\000\004" +
    "\031\242\001\001\000\004\031\237\001\001\000\002\001" +
    "\001\000\020\021\052\022\056\025\057\030\054\031\050" +
    "\033\065\034\062\001\001\000\004\035\227\001\001\000" +
    "\002\001\001\000\004\036\204\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\022" +
    "\076\023\072\024\071\025\101\030\074\031\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\022\076\023\151\024\071\025\101\030\074\031\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\022\076\023\141\024\071\025\101\030\074\031" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\022\076\023\140\024\071\025\101\030" +
    "\074\031\050\001\001\000\016\022\076\023\106\024\071" +
    "\025\101\030\074\031\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\022\076\023\137\024\071\025\101" +
    "\030\074\031\050\001\001\000\016\022\076\023\136\024" +
    "\071\025\101\030\074\031\050\001\001\000\016\022\076" +
    "\023\135\024\071\025\101\030\074\031\050\001\001\000" +
    "\016\022\076\023\134\024\071\025\101\030\074\031\050" +
    "\001\001\000\016\022\076\023\133\024\071\025\101\030" +
    "\074\031\050\001\001\000\016\022\076\023\132\024\071" +
    "\025\101\030\074\031\050\001\001\000\016\022\076\023" +
    "\131\024\071\025\101\030\074\031\050\001\001\000\016" +
    "\022\076\023\130\024\071\025\101\030\074\031\050\001" +
    "\001\000\016\022\076\023\127\024\071\025\101\030\074" +
    "\031\050\001\001\000\002\001\001\000\016\022\076\023" +
    "\126\024\071\025\101\030\074\031\050\001\001\000\016" +
    "\022\076\023\125\024\071\025\101\030\074\031\050\001" +
    "\001\000\016\022\076\023\124\024\071\025\101\030\074" +
    "\031\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\022\076\023\147\024\071\025\101" +
    "\030\074\031\050\001\001\000\004\031\146\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\030\154\031\155\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\022\076\023" +
    "\162\024\071\025\101\030\074\031\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\165\001\001\000" +
    "\010\007\045\020\166\027\043\001\001\000\020\021\052" +
    "\022\056\025\057\030\054\031\050\033\065\034\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\172" +
    "\001\001\000\010\007\045\020\173\027\043\001\001\000" +
    "\020\021\052\022\056\025\057\030\054\031\050\033\065" +
    "\034\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\022\076\023\202\024\071\025\101\030\074\031\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\022\076\023\206\024\071\025\101\030\074\031" +
    "\050\001\001\000\002\001\001\000\016\022\076\023\210" +
    "\024\071\025\101\030\074\031\050\001\001\000\002\001" +
    "\001\000\016\022\076\023\212\024\071\025\101\030\074" +
    "\031\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\215\001\001\000\010\007\045\020\216\027\043" +
    "\001\001\000\020\021\052\022\056\025\057\030\054\031" +
    "\050\033\065\034\062\001\001\000\002\001\001\000\020" +
    "\022\076\023\221\024\071\025\101\026\222\030\074\031" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\022\076\023\226\024\071\025\101\030" +
    "\074\031\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\022\076\023\231\024\071\025" +
    "\101\030\074\031\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\234\001\001\000\010\007\045\020" +
    "\235\027\043\001\001\000\020\021\052\022\056\025\057" +
    "\030\054\031\050\033\065\034\062\001\001\000\002\001" +
    "\001\000\004\031\240\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\240\001\001\000" +
    "\010\007\246\012\245\027\043\001\001\000\006\007\247" +
    "\027\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\256\001\001\000" +
    "\010\007\045\020\257\027\043\001\001\000\020\021\052" +
    "\022\056\025\057\030\054\031\050\033\065\034\062\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /*
public static void main(String args[]) throws Exception{
		new parser(new Yylex(System.in)).parse();
}*/
public void syntax_error(Symbol s){
System.out.println("Error en la linea "+(s.right+1)+"Columna"+s.left+" .Identificador "+s.value+" no reconocido ");
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


ArrayList<CNode> l=new ArrayList<CNode>();
ArrayList<BooleanExpresion> boolexp=new ArrayList<BooleanExpresion>();
LinkedList<CNode> list=new LinkedList<CNode>();
LinkedList<CNode> breakList=new LinkedList<CNode>();
LinkedList<CNode> continueList=new LinkedList<CNode>();
LinkedList<CNode> returnList=new LinkedList<CNode>();
LinkedList<functionIndex> fnList=new LinkedList<functionIndex>();
/*NECESITO SABER SI ESTOY EN UN WHILE DENTRO DE OTRO*/
Stack <String> whileNames =new Stack<String>();
Stack <String> fnNames =new Stack<String>();
String actualWhile="";

CNode program;
int contif=0;
int label=0;
int whileLabel=0;

int label(){
    label++;
    return label;
}


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // id ::= ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=i;

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // loc ::= loc DOT id 
            {
              CNode RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CNode lc = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loc",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // loc ::= id 
            {
              CNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new CNode(label(),""+i);
                   RESULT.idVar();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loc",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // type ::= FLOAT 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT="float";
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // type ::= VOID 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT="void";
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // type ::= BOOL 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                RESULT="boolean";
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // type ::= INT 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                RESULT="int";
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // actualList ::= actualList COMA exp 
            {
              CNode RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CNode al = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode e = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   RESULT=new CNode(al.getSingleCodeLine()+","+e.getSingleCodeLine());
                   RESULT.mergeUses(al,e);

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualList",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // actualList ::= exp 
            {
              CNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode e = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                   RESULT=e;
                   RESULT.addUse(e.getSingleCodeLine());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualList",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // fncall ::= id LPAREN actualList RPAREN 
            {
              CNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CNode al = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    RESULT=new CNode(label(),i+"( "+al.getSingleCodeLine()+" )");
                    if(i.contains("scanf")){
                        RESULT.addDefList(al);
                    }
                    else{
                        RESULT.mergeUses(al);
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fncall",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // fncall ::= id LPAREN RPAREN 
            {
              CNode RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String idd = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                    RESULT=new CNode(label(),idd+" ( ) ");
                            
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fncall",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // term ::= fncall 
            {
              CNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode f = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=f;
               // f.setType(7);                   
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // term ::= LPAREN exp RPAREN 
            {
              CNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CNode e = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    RESULT=new CNode(label(),e.getSingleCodeLine());
                    RESULT.mergeUses(e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // term ::= FALSE 
            {
              CNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new CNode(label(),"false");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // term ::= TRUE 
            {
              CNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT=new CNode(label(),"true");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // term ::= STRINGLITERAL 
            {
              CNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT=new CNode(label(),""+s);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // term ::= INTLITERAL 
            {
              CNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                RESULT=new CNode(label(),""+i);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // term ::= loc 
            {
              CNode RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode lc = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=lc;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exp ::= term 
            {
              CNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode t = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT= t;
                    if(RESULT.isId()){
                        RESULT.addUse(t.getSingleCodeLine());
                    }
                    
                 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exp ::= REFERENCE exp 
            {
              CNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode e = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                   RESULT=new CNode(label(),"&"+e.getSingleCodeLine());
                   RESULT.mergeUses(e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exp ::= MINUS exp 
            {
              CNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode e = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                   RESULT=new CNode(label(),"-"+e.getSingleCodeLine());
                   RESULT.mergeUses(e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exp ::= exp GREATEREQ exp 
            {
              CNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CNode e1 = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode e2 = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new CNode(label(),e1.getSingleCodeLine()+">="+e2.getSingleCodeLine());
                   RESULT.mergeUses(e1,e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp ::= exp LESSEQ exp 
            {
              CNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CNode e1 = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode e2 = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new CNode(label(),e1.getSingleCodeLine()+"<="+e2.getSingleCodeLine());
                    RESULT.mergeUses(e1,e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp ::= exp GREATER exp 
            {
              CNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CNode e1 = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode e2 = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                     RESULT=new CNode(label(),e1.getSingleCodeLine()+">"+e2.getSingleCodeLine());
                    RESULT.mergeUses(e1,e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp ::= exp LESS exp 
            {
              CNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CNode e1 = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode e2 = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                RESULT=new CNode(label(),e1.getSingleCodeLine()+"<"+e2.getSingleCodeLine());
                    RESULT.mergeUses(e1,e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= exp NOTEQUALS exp 
            {
              CNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CNode e1 = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode e2 = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                RESULT=new CNode(label(),e1.getSingleCodeLine()+"!="+e2.getSingleCodeLine());
                    RESULT.mergeUses(e1,e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= exp EQUALS exp 
            {
              CNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CNode e1 = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode e2 = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT=new CNode(label(),e1.getSingleCodeLine()+"="+e2.getSingleCodeLine());
                    RESULT.mergeUses(e1,e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= exp OR exp 
            {
              CNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CNode e1 = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode e2 = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT=new CNode(label(),e1.getSingleCodeLine()+"|"+e2.getSingleCodeLine());
                    RESULT.mergeUses(e1,e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= exp AND exp 
            {
              CNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CNode e1 = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode e2 = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT=new CNode(label(),e1.getSingleCodeLine()+"&"+e2.getSingleCodeLine());
                    RESULT.mergeUses(e1,e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= NOT exp 
            {
              CNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode e = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT=new CNode(label(),"-"+e.getSingleCodeLine());
                    RESULT.mergeUses(e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= exp DIVIDE exp 
            {
              CNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CNode e1 = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode e2 = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT=new CNode(label(),e1.getSingleCodeLine()+"/"+e2.getSingleCodeLine());
                    RESULT.mergeUses(e1,e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= exp TIMES exp 
            {
              CNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CNode e1 = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode e2 = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT=new CNode(label(),e1.getSingleCodeLine()+"*"+e2.getSingleCodeLine());
                    RESULT.mergeUses(e1,e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= loc MINUSMINUS 
            {
              CNode RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CNode lc = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    RESULT=new CNode(label(),lc.getSingleCodeLine()+"--");
                    RESULT.addUse(lc.getSingleCodeLine());
                    RESULT.addDef(lc.getSingleCodeLine());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= loc PLUSPLUS 
            {
              CNode RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CNode lc = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    RESULT=new CNode(label(),lc.getSingleCodeLine() +"++");
                    RESULT.addUse(lc.getSingleCodeLine());
                    RESULT.addDef(lc.getSingleCodeLine());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= exp MINUS exp 
            {
              CNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CNode e1 = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode e2 = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                RESULT=new CNode(label(),e1.getSingleCodeLine()+"-"+e2.getSingleCodeLine());
                    RESULT.mergeUses(e1,e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= exp PLUS exp 
            {
              CNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CNode e1 = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode e2 = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                RESULT=new CNode(label(),e1.getSingleCodeLine()+"+"+e2.getSingleCodeLine());
                    RESULT.mergeUses(e1,e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= assignExp 
            {
              CNode RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode ae = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=ae;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // assignExp ::= loc ASSIGN exp 
            {
              CNode RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CNode lc = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode e = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                RESULT=new CNode(label(),e.getSingleCodeLine()+" <- "+lc.getSingleCodeLine());
                RESULT.mergeUses(e);
                RESULT.addDef(lc.getSingleCodeLine());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignExp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CIF2 ::= IF LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY ELSE LCURLY varDeclList stmtList RCURLY 
            {
              CNode RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String ii = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		CNode e = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vdltleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vdltright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		LinkedList<CNode> vdlt = (LinkedList<CNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sltleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int sltright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<CNode> slt = (LinkedList<CNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vdleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vdleright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<CNode> vdle = (LinkedList<CNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sleright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CNode> sle = (LinkedList<CNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        boolexp.add(new BooleanExpresion(e.getSingleCodeLine(),iiright+1));
                        vdlt.addAll(slt);
                        vdle.addAll(sle);
                        for(int i=0;i<vdlt.size();i++){
                            if(i>0){
                                if(vdlt.get(i-1).getType()==0)
                                vdlt.get(i-1).setLeft(vdlt.get(i));
                            }
                        }
                         for(int i=0;i<vdle.size();i++){
                            if(i>0){
                                if(vdle.get(i-1).getType()==0)
                                vdle.get(i-1).setLeft(vdle.get(i));
                            }
                        }
                        RESULT=new CNode(label(),"IF "+e.getSingleCodeLine());
                        RESULT.addLabel(CNode.eLabels.IF);
                        RESULT.mergeUses(e);
                        RESULT.setLeft(vdlt.get(0));
                        RESULT.setRight(vdle.get(0));
                        RESULT.setLastLeft(vdlt.get(vdlt.size()-1));
                        RESULT.setLastRight(vdle.get(vdle.size()-1));
                        RESULT.setType(2);


                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CIF2",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CIF1 ::= IF LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY 
            {
              CNode RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String ii = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		CNode e = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<CNode> vdl = (LinkedList<CNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CNode> sl = (LinkedList<CNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		                    
                      boolexp.add(new BooleanExpresion(e.getSingleCodeLine(),iiright+1));
                      vdl.addAll(sl);
                      for(int i=0;i<vdl.size();i++){
                        if(i>0){
                            if(vdl.get(i-1).getType()==0)
                            vdl.get(i-1).setLeft(vdl.get(i));
                        }
                      }
                      RESULT=new CNode(label(),"IF "+e.getSingleCodeLine());
                      RESULT.addLabel(CNode.eLabels.IF);
                      RESULT.mergeUses(e);
                      RESULT.setLeft(vdl.get(0));
                      RESULT.setType(1);
                      RESULT.setLastLeft(vdl.get(vdl.size()-1));
 


              CUP$parser$result = parser.getSymbolFactory().newSymbol("CIF1",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // stmt ::= fncall SEMICOLON 
            {
              CNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CNode f = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    
                    RESULT=f;
                    //RESULT.setType(7); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // stmt ::= RETURN SEMICOLON 
            {
              CNode RESULT =null;
		 
                    RESULT=new CNode(label(),"return ");
                    returnList.addLast(RESULT);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // stmt ::= CONTINUE SEMICOLON 
            {
              CNode RESULT =null;
		 
                    RESULT=new CNode(label(),"continue "+actualWhile);
                    RESULT.addLabel(CNode.eLabels.CONTINUE);
                    RESULT.setType(6);
                    continueList.addLast(RESULT);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmt ::= BREAK SEMICOLON 
            {
              CNode RESULT =null;
		 
                    RESULT=new CNode(label(),"break "+actualWhile);
                    RESULT.addLabel(CNode.eLabels.BREAK);
                    RESULT.setType(4);
                    breakList.addLast(RESULT);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt ::= RETURN exp SEMICOLON 
            {
              CNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CNode e = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    RESULT=new CNode(label(),"return "+e.getSingleCodeLine());
                    RESULT.mergeUses(e);
                    RESULT.addLabel(CNode.eLabels.RETURN);
                    returnList.addLast(RESULT);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt ::= FOR NT$1 LPAREN exp SEMICOLON exp SEMICOLON exp RPAREN LCURLY varDeclList stmtList RCURLY 
            {
              CNode RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (CNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		CNode e1 = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		CNode e2 = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		CNode e3 = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<CNode> vdl = (LinkedList<CNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CNode> sl = (LinkedList<CNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                       // RESULT=new CNode(label(),"FOR ");
                        boolexp.add(new BooleanExpresion(e2.getSingleCodeLine(),aright+1));  
                         /*UNO LA LISTA DE VARDECL Y STMTLIST*/
                         vdl.addAll(sl);
                         /*UNO TODOS LOS NODOS DEL LIS.T*/
                         for(int i=0;i<vdl.size();i++){
                              if(i>0){
                                  if(vdl.get(i-1).getType()==0)
                                  vdl.get(i-1).setLeft(vdl.get(i));
                              }
                         }
                         RESULT=new CNode(label(),e1.getSingleCodeLine());
                         CNode nodeFor=new CNode(label(),"WHILE "+e2.getSingleCodeLine());
                         RESULT.setLeft(nodeFor);
                         nodeFor.addLabel(CNode.eLabels.FOR);
                         nodeFor.mergeUses(e2,e3);
                         nodeFor.setLeft(vdl.get(0));
                         //nodeFor.setType(5);
                         RESULT.setType(5);
                         //RESULT=nodeFor;
                         CNode incr=new CNode(label(),e3.getSingleCodeLine());
                         vdl.get(vdl.size()-1).setLeft(incr);
                         incr.setLeft(nodeFor);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$1 ::= 
            {
              CNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
a="while"+whileLabel; actualWhile=a; whileLabel++; whileNames.push(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= WHILE NT$0 LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY 
            {
              CNode RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (CNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		CNode e = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<CNode> vdl = (LinkedList<CNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CNode> sl = (LinkedList<CNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 

                        
                         boolexp.add(new BooleanExpresion(e.getSingleCodeLine(),aright+1));  
                         /*UNO LA LISTA DE VARDECL Y STMTLIST*/
                         vdl.addAll(sl);
                         /*UNO TODOS LOS NODOS DEL LIS.T*/
                         for(int i=0;i<vdl.size();i++){
                              if(i>0){
                                  if(vdl.get(i-1).getType()==0)
                                  vdl.get(i-1).setLeft(vdl.get(i));
                              }
                         }
                         RESULT=new CNode(label(),"WHILE "+e.getSingleCodeLine());
                         RESULT.addLabel(CNode.eLabels.WHILE);
                         RESULT.mergeUses(e);
                         RESULT.setLeft(vdl.get(0));
                         RESULT.setType(3);
                         vdl.get(vdl.size()-1).setLeft(RESULT);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$0 ::= 
            {
              CNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
a="while"+whileLabel; actualWhile=a; whileLabel++; whileNames.push(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= CIF2 
            {
              CNode RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode ii = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT=ii;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= CIF1 
            {
              CNode RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode ii = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT=ii;label++;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= COUT WRITE exp SEMICOLON 
            {
              CNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CNode e = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		                   
                    RESULT=new CNode(label()," cout **"+e.getSingleCodeLine()+"**");
                    RESULT.mergeUses(e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= CIN READ loc SEMICOLON 
            {
              CNode RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CNode lc = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    RESULT=new CNode(label()," cin "+lc.getSingleCodeLine());
                    RESULT.addDef(lc.getSingleCodeLine());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= loc MINUSMINUS SEMICOLON 
            {
              CNode RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CNode lc = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                    RESULT=new CNode(label(),lc.getSingleCodeLine()+"--");
                    RESULT.addUse(lc.getSingleCodeLine());
                    RESULT.addDef(lc.getSingleCodeLine());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= loc PLUSPLUS SEMICOLON 
            {
              CNode RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CNode lc = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                    RESULT=new CNode(label(),lc.getSingleCodeLine() +"++");
                    RESULT.addUse(lc.getSingleCodeLine());
                    RESULT.addDef(lc.getSingleCodeLine());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt ::= assignExp SEMICOLON 
            {
              CNode RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CNode ae = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new CNode(label(),ae.getSingleCodeLine());
                    RESULT.mergeUses(ae);
                    RESULT.addDefList(ae);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmtList ::= 
            {
              LinkedList<CNode> RESULT =null;
		 
                   RESULT=new LinkedList<CNode>();
                   label++;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtList",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmtList ::= stmtList stmt 
            {
              LinkedList<CNode> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CNode> sl = (LinkedList<CNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode s = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                   /*--------------  -------------------------*/
                   sl.addLast(s);
                   if(s.getType()==2){
                    CNode union=new CNode(label(),"");
                    union.addLabel(CNode.eLabels.ENDIF);
                    s.m_lastLeft.m_pLeftNode=union;
                    s.m_lastRight.m_pLeftNode=union;
                    sl.add(union);
                   }
                   if(s.getType()==1){
                    CNode union=new CNode(label(),"");
                    union.addLabel(CNode.eLabels.ENDIF);
                    s.m_lastLeft.m_pLeftNode=union;
                    s.m_pRightNode=union;
                    sl.add(union);
                   }
                   if(s.getType()==3){
                    
                    String thisWhile="";
                    try{
                        if (!whileNames.isEmpty()){
                            thisWhile=whileNames.pop();
                            actualWhile=whileNames.peek();
                         }
                    }catch(Exception ex){
                        //JOptionPane.showMessageDialog(this, ex);
                     }
                    CNode union=new CNode(label(),"");
                    union.addLabel(CNode.eLabels.ENDWHILE);
                    s.m_pRightNode=union;
                    sl.add(union);
                     /*MANDO LOS PUNTEROS DE LOS BREAKS AL FINAL DEL WHILE, al nodo UNION*/
                         if(!breakList.isEmpty()){
                            for(int i=0;i<breakList.size();i++){
                                    CNode actualBreak=breakList.get(i);
                                    if(actualBreak.getSingleCodeLine().contains(thisWhile)){
                                        actualBreak.m_pLeftNode=union;  
                                    }
                            }

                         }
                         if(!continueList.isEmpty()){
                            for(int i=0;i<continueList.size();i++){
                                    CNode actualContinue=continueList.get(i);
                                    if(actualContinue.getSingleCodeLine().contains(thisWhile)){
                                        actualContinue.m_pLeftNode=s;  
                                    }
                            }
                         }
                  
                   }
                   if(s.getType()==5){
                    
                    String thisWhile="";
                    try{
                        if (!whileNames.isEmpty()){
                            thisWhile=whileNames.pop();
                            actualWhile=whileNames.peek();
                         }
                    }catch(Exception ex){
                        //JOptionPane.showMessageDialog(this, ex);
                     }
                    CNode union=new CNode(label(),"");
                    union.addLabel(CNode.eLabels.FOR);
                    s.m_pLeftNode.m_pRightNode=union;
                    //s.m_pRightNode=union;
                    sl.add(union);
                     /*MANDO LOS PUNTEROS DE LOS BREAKS AL FINAL DEL WHILE, al nodo UNION*/
                         if(!breakList.isEmpty()){
                            for(int i=0;i<breakList.size();i++){
                                    CNode actualBreak=breakList.get(i);
                                    if(actualBreak.getSingleCodeLine().contains(thisWhile)){
                                        actualBreak.m_pLeftNode=union;  
                                    }
                            }

                         }
                         if(!continueList.isEmpty()){
                            for(int i=0;i<continueList.size();i++){
                                    CNode actualContinue=continueList.get(i);
                                    if(actualContinue.getSingleCodeLine().contains(thisWhile)){
                                        actualContinue.m_pLeftNode=s.m_pLeftNode;  
                                    }
                            }
                         }
                  
                   }
                   RESULT=sl;
                   
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtList",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // fnBody ::= LCURLY varDeclList stmtList RCURLY 
            {
              CNode RESULT =null;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<CNode> vdl = (LinkedList<CNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CNode> sl = (LinkedList<CNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    CNode last=new CNode(label(),"end function");
                    last.addLabel(CNode.eLabels.END);
                    last.setType(7);
                    sl.addLast(last);
                    label++;
                    vdl.addAll(sl);
                    for(int i=0;i<vdl.size();i++){
                            if(i>0){
                                if(vdl.get(i-1).getType()==0)
                                vdl.get(i-1).setLeft(vdl.get(i));
                            }
                    }
                    RESULT=vdl.get(0);
                    RESULT.setLastLeft(vdl.get(vdl.size()-1));
                            
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fnBody",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // formalDecl ::= type id 
            {
              CNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new CNode(i);
                   RESULT.addDef(i);

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalDecl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // formalsList ::= formalDecl COMA formalsList 
            {
              CNode RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CNode fd = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode fl = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                   RESULT=new CNode(fd.getSingleCodeLine()+","+fl.getSingleCodeLine());
                   RESULT.addDef(fd.getSingleCodeLine());
                   RESULT.addDefList(fl);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalsList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // formalsList ::= formalDecl 
            {
              CNode RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode fd = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                   RESULT = fd;


                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalsList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // mainbody ::= INT MAIN LPAREN RPAREN LCURLY varDeclList stmtList RCURLY 
            {
              String RESULT =null;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<CNode> vdl = (LinkedList<CNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CNode> sl = (LinkedList<CNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                        vdl.addAll(sl);
                        for(int i=0;i<vdl.size();i++){
                            if(i>0){
                                if(vdl.get(i-1).getType()==0)
                                vdl.get(i-1).setLeft(vdl.get(i));
                            }
                        }
                        CNode start=new CNode(label(),"start");
                        start.addLabel(CNode.eLabels.START);
                        start.setType(9);
                        start.setLeft(vdl.get(0));
                        CNode end=new CNode(label(),"end");
                        end.addLabel(CNode.eLabels.END);
                        end.setType(9);
                        vdl.get(vdl.size()-1).setLeft(end);
                        program=start;
                        fnList.addLast(new functionIndex("main",start,end));
                        for(CNode node:returnList){
                             node.setLeft(end);
                        }
                        returnList.clear();
                        list=vdl;

                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mainbody",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // formals ::= LPAREN formalsList RPAREN 
            {
              CNode RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CNode fl = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    RESULT=fl;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formals",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // formals ::= LPAREN RPAREN 
            {
              CNode RESULT =null;
		 
                    RESULT=new CNode ("");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formals",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // structBody ::= varDecl 
            {
              CNode RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode vd = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structBody",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // structBody ::= structBody varDecl 
            {
              CNode RESULT =null;
		int sbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CNode sb = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode vd = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                   
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structBody",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // structDecl ::= STRUCT id LCURLY structBody RCURLY SEMICOLON 
            {
              CNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CNode sb = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structDecl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // fnDecl ::= type id formals fnBody 
            {
              CNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CNode f = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode fb = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    CNode fnName=new CNode(label(),i+"("+f.getSingleCodeLine()+")");
                    fnName.addLabel(CNode.eLabels.START);
                    fnName.setType(6);
                    fnName.addDefList(f);
                    fnName.setLeft(fb);
                    fnName.setLastLeft(fb.m_lastLeft);
                    fb.m_lastLeft.setType(6);
                    fnList.addLast(new functionIndex(i+"("+f.getSingleCodeLine()+")",fnName,fb.m_lastLeft));
                    for(CNode node:returnList){
                        node.setLeft(fb.m_lastLeft);
                    }
                    returnList.clear();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fnDecl",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // varDecl ::= STRUCT id id SEMICOLON 
            {
              CNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDecl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // varDecl ::= type id SEMICOLON 
            {
              CNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CNode(label(),t+" "+i);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDecl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // varDeclList ::= 
            {
              LinkedList<CNode> RESULT =null;
		 RESULT = new LinkedList<CNode>();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDeclList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // varDeclList ::= varDeclList varDecl 
            {
              LinkedList<CNode> RESULT =null;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CNode> vdl = (LinkedList<CNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode vd = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 vdl.addLast(vd);
                   RESULT = vdl;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDeclList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decl ::= structDecl 
            {
              CNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode s = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=s;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // decl ::= fnDecl 
            {
              CNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode f = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=f;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decl ::= varDecl 
            {
              CNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode v = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=v;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declList ::= 
            {
              CNode RESULT =null;
		 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declList ::= declList decl 
            {
              CNode RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CNode dl = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode d = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new CNode(label(),"");
                   
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= errorlex 
            {
              String RESULT =null;
		System.out.println("errorlex");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= declList mainbody 
            {
              String RESULT =null;
		    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= declList 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

