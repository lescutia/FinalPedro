
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Apr 06 18:35:32 CDT 2017
//----------------------------------------------------

package scanner;

import java_cup.runtime.*;
import java.util.*;
import graphreduction.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Apr 06 18:35:32 CDT 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\114\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\003\000\002\003\004\000\002\003\002" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\005\004\000\002\005\002\000\002\007\005\000\002" +
    "\007\006\000\002\010\006\000\002\011\010\000\002\012" +
    "\004\000\002\012\003\000\002\013\004\000\002\013\005" +
    "\000\002\017\014\000\002\014\003\000\002\014\005\000" +
    "\002\015\004\000\002\016\006\000\002\020\004\000\002" +
    "\020\002\000\002\021\004\000\002\021\005\000\002\021" +
    "\005\000\002\021\006\000\002\021\006\000\002\021\003" +
    "\000\002\021\003\000\002\035\002\000\002\021\013\000" +
    "\002\021\005\000\002\021\004\000\002\021\004\000\002" +
    "\021\004\000\002\033\012\000\002\034\017\000\002\022" +
    "\005\000\002\023\003\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\005\000\002\023\004\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\004\000\002\023\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\005\000\002" +
    "\024\003\000\002\025\005\000\002\025\006\000\002\026" +
    "\003\000\002\026\005\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\030\003\000" +
    "\002\030\005\000\002\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\236\000\020\002\ufffc\004\ufffc\005\006\011\ufffc\013" +
    "\ufffc\016\ufffc\032\ufffc\001\002\000\016\002\000\004\011" +
    "\011\013\013\015\016\014\032\022\001\002\000\004\002" +
    "\007\001\002\000\004\002\ufffe\001\002\000\004\002\001" +
    "\001\002\000\016\002\ufffb\004\ufffb\011\ufffb\013\ufffb\016" +
    "\ufffb\032\ufffb\001\002\000\004\025\uffbc\001\002\000\004" +
    "\002\uffff\001\002\000\004\025\uffbb\001\002\000\004\025" +
    "\023\001\002\000\006\007\221\025\uffba\001\002\000\004" +
    "\025\023\001\002\000\016\002\ufffd\004\ufffd\011\ufffd\013" +
    "\ufffd\016\ufffd\032\ufffd\001\002\000\016\002\ufffa\004\ufffa" +
    "\011\ufffa\013\ufffa\016\ufffa\032\ufffa\001\002\000\016\002" +
    "\ufff9\004\ufff9\011\ufff9\013\ufff9\016\ufff9\032\ufff9\001\002" +
    "\000\004\025\uffb9\001\002\000\056\025\uffb6\031\uffb6\033" +
    "\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6\042\uffb6\043\uffb6" +
    "\044\uffb6\045\uffb6\046\uffb6\047\uffb6\051\uffb6\052\uffb6\053" +
    "\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6\061\uffb6" +
    "\001\002\000\006\033\027\035\025\001\002\000\036\002" +
    "\ufff6\004\ufff6\011\ufff6\013\ufff6\016\ufff6\017\ufff6\020\ufff6" +
    "\021\ufff6\023\ufff6\024\ufff6\025\ufff6\030\ufff6\032\ufff6\062" +
    "\ufff6\001\002\000\004\031\041\001\002\000\014\004\011" +
    "\011\013\013\033\032\022\034\030\001\002\000\004\031" +
    "\ufff0\001\002\000\004\025\023\001\002\000\004\034\037" +
    "\001\002\000\004\025\uffba\001\002\000\006\034\uffed\036" +
    "\035\001\002\000\012\004\011\011\013\013\033\032\022" +
    "\001\002\000\004\034\uffec\001\002\000\004\031\uffef\001" +
    "\002\000\006\034\uffeb\036\uffeb\001\002\000\034\004\ufff7" +
    "\011\ufff7\013\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7\023" +
    "\ufff7\024\ufff7\025\ufff7\030\ufff7\032\ufff7\062\ufff7\001\002" +
    "\000\016\002\ufff4\004\ufff4\011\ufff4\013\ufff4\016\ufff4\032" +
    "\ufff4\001\002\000\034\004\011\011\013\013\033\016\045" +
    "\017\uffe8\020\uffe8\021\uffe8\023\uffe8\024\uffe8\025\uffe8\030" +
    "\uffe8\032\022\062\uffe8\001\002\000\004\025\023\001\002" +
    "\000\004\025\023\001\002\000\034\004\ufff8\011\ufff8\013" +
    "\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\023\ufff8\024\ufff8" +
    "\025\ufff8\030\ufff8\032\ufff8\062\ufff8\001\002\000\022\017" +
    "\061\020\053\021\054\023\050\024\063\025\023\030\057" +
    "\062\065\001\002\000\004\033\uffe0\001\002\000\052\033" +
    "\176\034\uffb8\035\uffb8\036\uffb8\037\uffb8\042\uffb8\043\uffb8" +
    "\044\uffb8\045\uffb8\046\uffb8\047\uffb8\051\uffb8\052\uffb8\053" +
    "\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8" +
    "\001\002\000\022\017\uffe9\020\uffe9\021\uffe9\023\uffe9\024" +
    "\uffe9\025\uffe9\030\uffe9\062\uffe9\001\002\000\004\040\173" +
    "\001\002\000\004\033\157\001\002\000\012\037\140\042" +
    "\154\043\153\061\137\001\002\000\004\035\152\001\002" +
    "\000\016\002\uffea\004\uffea\011\uffea\013\uffea\016\uffea\032" +
    "\uffea\001\002\000\004\035\151\001\002\000\004\041\145" +
    "\001\002\000\022\017\uffe1\020\uffe1\021\uffe1\023\uffe1\024" +
    "\uffe1\025\uffe1\030\uffe1\062\uffe1\001\002\000\024\014\071" +
    "\015\075\025\023\026\102\027\100\033\103\035\076\045" +
    "\067\050\101\001\002\000\022\017\uffe2\020\uffe2\021\uffe2" +
    "\023\uffe2\024\uffe2\025\uffe2\030\uffe2\062\uffe2\001\002\000" +
    "\004\035\066\001\002\000\022\017\uffdd\020\uffdd\021\uffdd" +
    "\023\uffdd\024\uffdd\025\uffdd\030\uffdd\062\uffdd\001\002\000" +
    "\022\014\071\015\075\025\023\026\102\027\100\033\103" +
    "\045\067\050\101\001\002\000\040\034\uffc8\035\uffc8\036" +
    "\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\051\uffc8\052\uffc8" +
    "\053\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8\001" +
    "\002\000\040\034\uffc4\035\uffc4\036\uffc4\044\uffc4\045\uffc4" +
    "\046\uffc4\047\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055" +
    "\uffc4\056\uffc4\057\uffc4\060\uffc4\001\002\000\034\035\143" +
    "\044\114\045\105\046\117\047\107\051\106\052\121\053" +
    "\120\054\110\055\115\056\112\057\111\060\113\001\002" +
    "\000\044\034\uffc7\035\uffc7\036\uffc7\037\140\044\uffc7\045" +
    "\uffc7\046\uffc7\047\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7" +
    "\055\uffc7\056\uffc7\057\uffc7\060\uffc7\061\137\001\002\000" +
    "\040\034\uffd7\035\uffd7\036\uffd7\044\uffd7\045\uffd7\046\uffd7" +
    "\047\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7\056" +
    "\uffd7\057\uffd7\060\uffd7\001\002\000\040\034\uffc3\035\uffc3" +
    "\036\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\051\uffc3\052" +
    "\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3" +
    "\001\002\000\022\017\uffdc\020\uffdc\021\uffdc\023\uffdc\024" +
    "\uffdc\025\uffdc\030\uffdc\062\uffdc\001\002\000\040\034\uffc1" +
    "\035\uffc1\036\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\051" +
    "\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1" +
    "\060\uffc1\001\002\000\040\034\uffc5\035\uffc5\036\uffc5\044" +
    "\uffc5\045\uffc5\046\uffc5\047\uffc5\051\uffc5\052\uffc5\053\uffc5" +
    "\054\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5\001\002\000" +
    "\022\014\071\015\075\025\023\026\102\027\100\033\103" +
    "\045\067\050\101\001\002\000\040\034\uffc6\035\uffc6\036" +
    "\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\051\uffc6\052\uffc6" +
    "\053\uffc6\054\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6\001" +
    "\002\000\022\014\071\015\075\025\023\026\102\027\100" +
    "\033\103\045\067\050\101\001\002\000\034\034\116\044" +
    "\114\045\105\046\117\047\107\051\106\052\121\053\120" +
    "\054\110\055\115\056\112\057\111\060\113\001\002\000" +
    "\022\014\071\015\075\025\023\026\102\027\100\033\103" +
    "\045\067\050\101\001\002\000\022\014\071\015\075\025" +
    "\023\026\102\027\100\033\103\045\067\050\101\001\002" +
    "\000\022\014\071\015\075\025\023\026\102\027\100\033" +
    "\103\045\067\050\101\001\002\000\022\014\071\015\075" +
    "\025\023\026\102\027\100\033\103\045\067\050\101\001" +
    "\002\000\022\014\071\015\075\025\023\026\102\027\100" +
    "\033\103\045\067\050\101\001\002\000\022\014\071\015" +
    "\075\025\023\026\102\027\100\033\103\045\067\050\101" +
    "\001\002\000\022\014\071\015\075\025\023\026\102\027" +
    "\100\033\103\045\067\050\101\001\002\000\022\014\071" +
    "\015\075\025\023\026\102\027\100\033\103\045\067\050" +
    "\101\001\002\000\022\014\071\015\075\025\023\026\102" +
    "\027\100\033\103\045\067\050\101\001\002\000\040\034" +
    "\uffc2\035\uffc2\036\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2" +
    "\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2\057" +
    "\uffc2\060\uffc2\001\002\000\022\014\071\015\075\025\023" +
    "\026\102\027\100\033\103\045\067\050\101\001\002\000" +
    "\022\014\071\015\075\025\023\026\102\027\100\033\103" +
    "\045\067\050\101\001\002\000\022\014\071\015\075\025" +
    "\023\026\102\027\100\033\103\045\067\050\101\001\002" +
    "\000\040\034\uffd0\035\uffd0\036\uffd0\044\114\045\105\046" +
    "\117\047\107\051\106\052\uffd0\053\120\054\110\055\115" +
    "\056\112\057\111\060\113\001\002\000\024\034\uffcf\035" +
    "\uffcf\036\uffcf\044\114\045\105\046\117\047\107\051\uffcf" +
    "\052\uffcf\001\002\000\040\034\uffd4\035\uffd4\036\uffd4\044" +
    "\uffd4\045\uffd4\046\uffd4\047\uffd4\051\uffd4\052\uffd4\053\uffd4" +
    "\054\uffd4\055\uffd4\056\uffd4\057\uffd4\060\uffd4\001\002\000" +
    "\024\034\uffcd\035\uffcd\036\uffcd\044\114\045\105\046\117" +
    "\047\107\051\uffcd\052\uffcd\001\002\000\040\034\uffd6\035" +
    "\uffd6\036\uffd6\044\uffd6\045\uffd6\046\117\047\107\051\uffd6" +
    "\052\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6\060" +
    "\uffd6\001\002\000\024\034\uffca\035\uffca\036\uffca\044\114" +
    "\045\105\046\117\047\107\051\uffca\052\uffca\001\002\000" +
    "\024\034\uffcc\035\uffcc\036\uffcc\044\114\045\105\046\117" +
    "\047\107\051\uffcc\052\uffcc\001\002\000\024\034\uffcb\035" +
    "\uffcb\036\uffcb\044\114\045\105\046\117\047\107\051\uffcb" +
    "\052\uffcb\001\002\000\024\034\uffce\035\uffce\036\uffce\044" +
    "\114\045\105\046\117\047\107\051\uffce\052\uffce\001\002" +
    "\000\040\034\uffd3\035\uffd3\036\uffd3\044\uffd3\045\uffd3\046" +
    "\uffd3\047\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3" +
    "\056\uffd3\057\uffd3\060\uffd3\001\002\000\040\034\uffd1\035" +
    "\uffd1\036\uffd1\044\114\045\105\046\117\047\107\051\uffd1" +
    "\052\uffd1\053\120\054\110\055\115\056\112\057\111\060" +
    "\113\001\002\000\040\034\uffd5\035\uffd5\036\uffd5\044\uffd5" +
    "\045\uffd5\046\117\047\107\051\uffd5\052\uffd5\053\uffd5\054" +
    "\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5\001\002\000\040" +
    "\034\uffd2\035\uffd2\036\uffd2\044\uffd2\045\uffd2\046\uffd2\047" +
    "\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2" +
    "\057\uffd2\060\uffd2\001\002\000\022\014\071\015\075\025" +
    "\023\026\102\027\100\033\103\045\067\050\101\001\002" +
    "\000\004\025\023\001\002\000\050\034\uffb7\035\uffb7\036" +
    "\uffb7\037\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7" +
    "\047\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7\055\uffb7\056" +
    "\uffb7\057\uffb7\060\uffb7\061\uffb7\001\002\000\040\034\uffd8" +
    "\035\uffd8\036\uffd8\044\114\045\105\046\117\047\107\051" +
    "\106\052\121\053\120\054\110\055\115\056\112\057\111" +
    "\060\113\001\002\000\022\017\uffde\020\uffde\021\uffde\023" +
    "\uffde\024\uffde\025\uffde\030\uffde\062\uffde\001\002\000\040" +
    "\034\uffc9\035\uffc9\036\uffc9\044\uffc9\045\uffc9\046\117\047" +
    "\107\051\uffc9\052\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9" +
    "\057\uffc9\060\uffc9\001\002\000\004\025\023\001\002\000" +
    "\006\035\150\037\140\001\002\000\006\035\uffb8\037\uffb8" +
    "\001\002\000\022\017\uffe4\020\uffe4\021\uffe4\023\uffe4\024" +
    "\uffe4\025\uffe4\030\uffe4\062\uffe4\001\002\000\022\017\uffdb" +
    "\020\uffdb\021\uffdb\023\uffdb\024\uffdb\025\uffdb\030\uffdb\062" +
    "\uffdb\001\002\000\022\017\uffe7\020\uffe7\021\uffe7\023\uffe7" +
    "\024\uffe7\025\uffe7\030\uffe7\062\uffe7\001\002\000\004\035" +
    "\156\001\002\000\004\035\155\001\002\000\022\017\uffe6" +
    "\020\uffe6\021\uffe6\023\uffe6\024\uffe6\025\uffe6\030\uffe6\062" +
    "\uffe6\001\002\000\022\017\uffe5\020\uffe5\021\uffe5\023\uffe5" +
    "\024\uffe5\025\uffe5\030\uffe5\062\uffe5\001\002\000\022\014" +
    "\071\015\075\025\023\026\102\027\100\033\103\045\067" +
    "\050\101\001\002\000\034\034\161\044\114\045\105\046" +
    "\117\047\107\051\106\052\121\053\120\054\110\055\115" +
    "\056\112\057\111\060\113\001\002\000\004\031\162\001" +
    "\002\000\034\004\ufff7\011\ufff7\013\ufff7\016\ufff7\017\ufff7" +
    "\020\ufff7\021\ufff7\023\ufff7\024\ufff7\025\ufff7\030\ufff7\032" +
    "\ufff7\062\ufff7\001\002\000\034\004\011\011\013\013\033" +
    "\016\045\017\uffe8\020\uffe8\021\uffe8\023\uffe8\024\uffe8\025" +
    "\uffe8\030\uffe8\032\022\062\uffe8\001\002\000\022\017\061" +
    "\020\053\021\054\023\050\024\063\025\023\030\165\062" +
    "\065\001\002\000\024\017\uffda\020\uffda\021\uffda\022\166" +
    "\023\uffda\024\uffda\025\uffda\030\uffda\062\uffda\001\002\000" +
    "\004\031\167\001\002\000\034\004\ufff7\011\ufff7\013\ufff7" +
    "\016\ufff7\017\ufff7\020\ufff7\021\ufff7\023\ufff7\024\ufff7\025" +
    "\ufff7\030\ufff7\032\ufff7\062\ufff7\001\002\000\034\004\011" +
    "\011\013\013\033\016\045\017\uffe8\020\uffe8\021\uffe8\023" +
    "\uffe8\024\uffe8\025\uffe8\030\uffe8\032\022\062\uffe8\001\002" +
    "\000\022\017\061\020\053\021\054\023\050\024\063\025" +
    "\023\030\172\062\065\001\002\000\022\017\uffd9\020\uffd9" +
    "\021\uffd9\023\uffd9\024\uffd9\025\uffd9\030\uffd9\062\uffd9\001" +
    "\002\000\022\014\071\015\075\025\023\026\102\027\100" +
    "\033\103\045\067\050\101\001\002\000\034\035\175\044" +
    "\114\045\105\046\117\047\107\051\106\052\121\053\120" +
    "\054\110\055\115\056\112\057\111\060\113\001\002\000" +
    "\022\017\uffe3\020\uffe3\021\uffe3\023\uffe3\024\uffe3\025\uffe3" +
    "\030\uffe3\062\uffe3\001\002\000\024\014\071\015\075\025" +
    "\023\026\102\027\100\033\103\034\201\045\067\050\101" +
    "\001\002\000\036\034\uffbe\036\uffbe\044\114\045\105\046" +
    "\117\047\107\051\106\052\121\053\120\054\110\055\115" +
    "\056\112\057\111\060\113\001\002\000\006\034\203\036" +
    "\202\001\002\000\040\034\uffc0\035\uffc0\036\uffc0\044\uffc0" +
    "\045\uffc0\046\uffc0\047\uffc0\051\uffc0\052\uffc0\053\uffc0\054" +
    "\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0\001\002\000\022" +
    "\014\071\015\075\025\023\026\102\027\100\033\103\045" +
    "\067\050\101\001\002\000\040\034\uffbf\035\uffbf\036\uffbf" +
    "\044\uffbf\045\uffbf\046\uffbf\047\uffbf\051\uffbf\052\uffbf\053" +
    "\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf\001\002" +
    "\000\036\034\uffbd\036\uffbd\044\114\045\105\046\117\047" +
    "\107\051\106\052\121\053\120\054\110\055\115\056\112" +
    "\057\111\060\113\001\002\000\004\033\206\001\002\000" +
    "\022\014\071\015\075\025\023\026\102\027\100\033\103" +
    "\045\067\050\101\001\002\000\034\034\210\044\114\045" +
    "\105\046\117\047\107\051\106\052\121\053\120\054\110" +
    "\055\115\056\112\057\111\060\113\001\002\000\004\031" +
    "\211\001\002\000\034\004\ufff7\011\ufff7\013\ufff7\016\ufff7" +
    "\017\ufff7\020\ufff7\021\ufff7\023\ufff7\024\ufff7\025\ufff7\030" +
    "\ufff7\032\ufff7\062\ufff7\001\002\000\034\004\011\011\013" +
    "\013\033\016\045\017\uffe8\020\uffe8\021\uffe8\023\uffe8\024" +
    "\uffe8\025\uffe8\030\uffe8\032\022\062\uffe8\001\002\000\022" +
    "\017\061\020\053\021\054\023\050\024\063\025\023\030" +
    "\214\062\065\001\002\000\022\017\uffdf\020\uffdf\021\uffdf" +
    "\023\uffdf\024\uffdf\025\uffdf\030\uffdf\062\uffdf\001\002\000" +
    "\004\025\023\001\002\000\004\035\217\001\002\000\036" +
    "\002\ufff5\004\ufff5\011\ufff5\013\ufff5\016\ufff5\017\ufff5\020" +
    "\ufff5\021\ufff5\023\ufff5\024\ufff5\025\ufff5\030\ufff5\032\ufff5" +
    "\062\ufff5\001\002\000\004\035\025\001\002\000\004\033" +
    "\222\001\002\000\004\034\223\001\002\000\004\031\224" +
    "\001\002\000\032\004\ufff7\011\ufff7\013\ufff7\016\ufff7\017" +
    "\ufff7\020\ufff7\021\ufff7\023\ufff7\024\ufff7\025\ufff7\032\ufff7" +
    "\062\ufff7\001\002\000\032\004\011\011\013\013\033\016" +
    "\045\017\uffe8\020\uffe8\021\uffe8\023\uffe8\024\uffe8\025\uffe8" +
    "\032\022\062\uffe8\001\002\000\020\017\061\020\053\021" +
    "\054\023\050\024\227\025\023\062\065\001\002\000\024" +
    "\014\071\015\075\025\023\026\102\027\100\033\103\035" +
    "\230\045\067\050\101\001\002\000\022\017\uffdc\020\uffdc" +
    "\021\uffdc\023\uffdc\024\uffdc\025\uffdc\030\231\062\uffdc\001" +
    "\002\000\004\002\uffee\001\002\000\006\025\023\031\233" +
    "\001\002\000\014\004\011\011\013\013\033\016\045\032" +
    "\022\001\002\000\016\004\011\011\013\013\033\016\045" +
    "\030\237\032\022\001\002\000\016\004\ufff1\011\ufff1\013" +
    "\ufff1\016\ufff1\030\ufff1\032\ufff1\001\002\000\016\004\ufff2" +
    "\011\ufff2\013\ufff2\016\ufff2\030\ufff2\032\ufff2\001\002\000" +
    "\004\035\240\001\002\000\016\002\ufff3\004\ufff3\011\ufff3" +
    "\013\ufff3\016\ufff3\032\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\236\000\006\002\004\003\003\001\001\000\016\004" +
    "\016\007\007\010\017\011\020\017\011\027\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\231\001\001\000\002\001\001\000" +
    "\004\031\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\025\001\001\000\002\001\001\000\004\016\041" +
    "\001\001\000\010\014\031\015\033\027\030\001\001\000" +
    "\002\001\001\000\004\031\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\014\035\015" +
    "\033\027\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\042\001\001\000\002\001" +
    "\001\000\010\007\045\020\046\027\043\001\001\000\004" +
    "\031\217\001\001\000\004\031\214\001\001\000\002\001" +
    "\001\000\020\021\051\022\055\025\057\030\054\031\050" +
    "\033\063\034\061\001\001\000\004\035\204\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\022\073\023\071\024\067\025\076\030\072\031" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\022\073\023\143\024\067\025\076\030" +
    "\072\031\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\022\073\023\135\024\067\025\076\030" +
    "\072\031\050\001\001\000\002\001\001\000\016\022\073" +
    "\023\103\024\067\025\076\030\072\031\050\001\001\000" +
    "\002\001\001\000\016\022\073\023\134\024\067\025\076" +
    "\030\072\031\050\001\001\000\016\022\073\023\133\024" +
    "\067\025\076\030\072\031\050\001\001\000\016\022\073" +
    "\023\132\024\067\025\076\030\072\031\050\001\001\000" +
    "\016\022\073\023\131\024\067\025\076\030\072\031\050" +
    "\001\001\000\016\022\073\023\130\024\067\025\076\030" +
    "\072\031\050\001\001\000\016\022\073\023\127\024\067" +
    "\025\076\030\072\031\050\001\001\000\016\022\073\023" +
    "\126\024\067\025\076\030\072\031\050\001\001\000\016" +
    "\022\073\023\125\024\067\025\076\030\072\031\050\001" +
    "\001\000\016\022\073\023\124\024\067\025\076\030\072" +
    "\031\050\001\001\000\002\001\001\000\016\022\073\023" +
    "\123\024\067\025\076\030\072\031\050\001\001\000\016" +
    "\022\073\023\122\024\067\025\076\030\072\031\050\001" +
    "\001\000\016\022\073\023\121\024\067\025\076\030\072" +
    "\031\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\022\073\023\141\024\067\025" +
    "\076\030\072\031\050\001\001\000\004\031\140\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\030\145\031\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\022\073\023" +
    "\157\024\067\025\076\030\072\031\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\162\001\001\000" +
    "\010\007\045\020\163\027\043\001\001\000\020\021\051" +
    "\022\055\025\057\030\054\031\050\033\063\034\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\167" +
    "\001\001\000\010\007\045\020\170\027\043\001\001\000" +
    "\020\021\051\022\055\025\057\030\054\031\050\033\063" +
    "\034\061\001\001\000\002\001\001\000\016\022\073\023" +
    "\173\024\067\025\076\030\072\031\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\022\073\023\176\024" +
    "\067\025\076\026\177\030\072\031\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\022" +
    "\073\023\203\024\067\025\076\030\072\031\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\022\073\023\206\024\067\025\076\030\072\031\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\211\001\001\000\010\007\045\020\212\027\043\001\001" +
    "\000\020\021\051\022\055\025\057\030\054\031\050\033" +
    "\063\034\061\001\001\000\002\001\001\000\004\031\215" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\224\001\001\000\010\007\045\020\225\027" +
    "\043\001\001\000\020\021\051\022\055\025\057\030\054" +
    "\031\050\033\063\034\061\001\001\000\016\022\073\023" +
    "\071\024\067\025\076\030\072\031\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\215\001\001\000" +
    "\010\007\234\012\233\027\043\001\001\000\006\007\235" +
    "\027\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public static void main(String args[]) throws Exception{
		new parser(new Yylex(System.in)).parse();
}
public void syntax_error(Symbol s){
System.out.println("Error en la linea "+(s.right+1)+"Columna"+s.left+" .Identificador "+s.value+" no reconocido ");
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


ArrayList<CNode> l=new ArrayList<CNode>();
ArrayList<String> boolexp=new ArrayList<String>();
LinkedList<CNode> list=new LinkedList<CNode>();
LinkedList<CNode> breakList=new LinkedList<CNode>();
Stack <String> whileNames =new Stack<String>();
String actualWhile="";

CNode program;
int contif=0;
int label=0;
int whileLabel=0;


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // id ::= ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=i;

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // loc ::= loc DOT id 
            {
              String RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String lc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loc",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // loc ::= id 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=""+i;

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loc",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // type ::= FLOAT 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT="float";
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // type ::= VOID 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT="void";
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // type ::= BOOL 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                RESULT="boolean";
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // type ::= INT 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                RESULT="int";
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // actualList ::= actualList COMMA exp 
            {
              String RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String al = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   RESULT=RESULT+e;

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualList",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // actualList ::= exp 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                   RESULT=e;

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualList",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // fncall ::= id LPAREN actualList RPAREN 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String al = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fncall",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // fncall ::= id LPAREN RPAREN 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                                
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fncall",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // term ::= fncall 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=""+f;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // term ::= LPAREN exp RPAREN 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    RESULT="("+e+")";
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // term ::= FALSE 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT="FALSE";
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // term ::= TRUE 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT="TRUE";
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // term ::= STRINGLITERAL 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=s;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // term ::= INTLITERAL 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                RESULT=i;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // term ::= loc 
            {
              String RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=""+lc;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp ::= term 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT= t;
                 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= MINUS exp 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT="-"+e;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= exp GREATEREQ exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+">="+e2;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= exp LESSEQ exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+"<="+e2;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= exp GREATER exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+">"+e2;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= exp LESS exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+"<"+e2;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= exp NOTEQUALS exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+"!="+e2;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= exp EQUALS exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+"=="+e2;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= exp OR exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+"|"+e2;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= exp AND exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+"&"+e2;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= NOT exp 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT="!"+e;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= exp DIVIDE exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+"/"+e2;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= exp TIMES exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+"*"+e2;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= exp MINUS exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+"-"+e2;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= exp PLUS exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+"+"+e2;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= assignExp 
            {
              String RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ae = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=""+ae;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // assignExp ::= loc ASSIGN exp 
            {
              String RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String lc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=lc+" -> "+e;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignExp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CIF2 ::= IF LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY ELSE LCURLY varDeclList stmtList RCURLY 
            {
              CNode RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String ii = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vdltleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vdltright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		LinkedList<CNode> vdlt = (LinkedList<CNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sltleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int sltright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<CNode> slt = (LinkedList<CNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vdleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vdleright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<CNode> vdle = (LinkedList<CNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sleright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CNode> sle = (LinkedList<CNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        boolexp.add(e);
                        vdlt.addAll(slt);
                        vdle.addAll(sle);
                        for(int i=0;i<vdlt.size();i++){
                            if(i>0){
                                if(vdlt.get(i-1).getType()==0)
                                vdlt.get(i-1).setLeft(vdlt.get(i));
                            }
                        }
                         for(int i=0;i<vdle.size();i++){
                            if(i>0){
                                if(vdle.get(i-1).getType()==0)
                                vdle.get(i-1).setLeft(vdle.get(i));
                            }
                        }
                        RESULT=new CNode("IF "+e);
                        RESULT.setLeft(vdlt.get(0));
                        RESULT.setRight(vdle.get(0));
                        RESULT.setLastLeft(vdlt.get(vdlt.size()-1));
                        RESULT.setLastRight(vdle.get(vdle.size()-1));
                        RESULT.setType(2);


                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CIF2",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CIF1 ::= IF LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY 
            {
              CNode RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String ii = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<CNode> vdl = (LinkedList<CNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CNode> sl = (LinkedList<CNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		                    
                      boolexp.add(e);
                      vdl.addAll(sl);
                      for(int i=0;i<vdl.size();i++){
                        if(i>0){
                            if(vdl.get(i-1).getType()==0)
                            vdl.get(i-1).setLeft(vdl.get(i));
                        }
                      }
                      RESULT=new CNode("IF "+e);
                      RESULT.setLeft(vdl.get(0));
                      RESULT.setType(1);
                      RESULT.setLastLeft(vdl.get(vdl.size()-1));
 


              CUP$parser$result = parser.getSymbolFactory().newSymbol("CIF1",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmt ::= fncall SEMICOLON 
            {
              CNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt ::= RETURN SEMICOLON 
            {
              CNode RESULT =null;
		 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt ::= BREAK SEMICOLON 
            {
              CNode RESULT =null;
		 
                    RESULT=new CNode("break "+actualWhile);
                    RESULT.setType(4);
                    breakList.addLast(RESULT);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= RETURN exp SEMICOLON 
            {
              CNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    RESULT=new CNode("return "+e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= WHILE NT$0 LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY 
            {
              CNode RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (CNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<CNode> vdl = (LinkedList<CNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CNode> sl = (LinkedList<CNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 

                        
                         boolexp.add(e);  
                         /*UNO LA LISTA DE VARDECL Y STMTLIST*/
                         vdl.addAll(sl);
                         /*UNO TODOS LOS NODOS DEL LIST*/
                         for(int i=0;i<vdl.size();i++){
                              if(i>0){
                                  if(vdl.get(i-1).getType()==0)
                                  vdl.get(i-1).setLeft(vdl.get(i));
                              }
                         }
                         RESULT=new CNode("WHILE "+e);
                         RESULT.setLeft(vdl.get(0));
                         RESULT.setType(3);
                         vdl.get(vdl.size()-1).setLeft(RESULT);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$0 ::= 
            {
              CNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
a="while"+whileLabel; actualWhile=a; whileLabel++; whileNames.push(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= CIF2 
            {
              CNode RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode ii = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT=ii;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= CIF1 
            {
              CNode RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode ii = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT=ii;label++;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= COUT WRITE exp SEMICOLON 
            {
              CNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		                   
                    RESULT=new CNode(" cout "+e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= CIN READ loc SEMICOLON 
            {
              CNode RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String lc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    RESULT=new CNode(" cin "+lc);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= loc MINUSMINUS SEMICOLON 
            {
              CNode RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String lc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                    RESULT=new CNode(lc+"--");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= loc PLUSPLUS SEMICOLON 
            {
              CNode RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String lc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                    RESULT=new CNode(lc +"++");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt ::= assignExp SEMICOLON 
            {
              CNode RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ae = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new CNode(ae);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmtList ::= 
            {
              LinkedList<CNode> RESULT =null;
		 
                   RESULT=new LinkedList<CNode>();
                   label++;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtList",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmtList ::= stmtList stmt 
            {
              LinkedList<CNode> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CNode> sl = (LinkedList<CNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CNode s = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                   /*--------------  -------------------------*/
                   sl.addLast(s);
                   if(s.getType()==2){
                    CNode union=new CNode("end if"+label);
                    label++;
                    s.m_lastLeft.m_pLeftNode=union;
                    s.m_lastRight.m_pLeftNode=union;
                    sl.add(union);
                   }
                   if(s.getType()==1){
                    CNode union=new CNode("end if"+label);
                    label++;
                    s.m_lastLeft.m_pLeftNode=union;
                    s.m_pRightNode=union;
                    sl.add(union);
                   }
                   if(s.getType()==3){
                    String thisWhile="";
                        if (!whileNames.isEmpty()){
                            thisWhile=whileNames.pop();
                            actualWhile=whileNames.peek();
                         }
                    CNode union=new CNode("end "+thisWhile);
                    s.m_pRightNode=union;
                    sl.add(union);
                     /*MANDO LOS PUNTEROS DE LOS BREAKS AL FINAL DEL WHILE, al nodo UNION*/
                         if(breakList.size()>0){
                            for(int i=0;i<breakList.size();i++){
                                    CNode actualBreak=breakList.get(i);
                                    if(actualBreak.getSingleCodeLine().contains(thisWhile)){
                                        actualBreak.m_pLeftNode=union;  
                                    }
                            }

                         }
                   }
                   RESULT=sl;
                   
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtList",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // fnBody ::= LCURLY varDeclList stmtList RCURLY 
            {
              String RESULT =null;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<CNode> vdl = (LinkedList<CNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CNode> sl = (LinkedList<CNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                            
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fnBody",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // formalDecl ::= type id 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT="declare "+t+" "+i;

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalDecl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // formalsList ::= formalDecl COMMA formalsList 
            {
              String RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String fd = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                   RESULT=RESULT+fd;

                    label++;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalsList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // formalsList ::= formalDecl 
            {
              String RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fd = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                   RESULT=fd;


                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalsList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // mainbody ::= VOID MAIN LPAREN RPAREN LCURLY varDeclList stmtList RETURN SEMICOLON RCURLY 
            {
              String RESULT =null;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<CNode> vdl = (LinkedList<CNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<CNode> sl = (LinkedList<CNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 
                        vdl.addAll(sl);
                        for(int i=0;i<vdl.size();i++){
                            if(i>0){
                                if(vdl.get(i-1).getType()==0)
                                vdl.get(i-1).setLeft(vdl.get(i));
                            }
                        }
                        program=vdl.get(0);
                        list=vdl;

                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mainbody",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // formals ::= LPAREN formalsList RPAREN 
            {
              String RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String fl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formals",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // formals ::= LPAREN RPAREN 
            {
              String RESULT =null;
		 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formals",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // structBody ::= varDecl 
            {
              String RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vd = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structBody",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // structBody ::= structBody varDecl 
            {
              String RESULT =null;
		int sbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sb = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vd = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                   
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structBody",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // structDecl ::= STRUCT id LCURLY structBody RCURLY SEMICOLON 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String sb = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structDecl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // fnDecl ::= type id formals fnBody 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fb = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fnDecl",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // varDecl ::= STRUCT id id SEMICOLON 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDecl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // varDecl ::= type id SEMICOLON 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = t+" "+i;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDecl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // varDeclList ::= 
            {
              LinkedList<CNode> RESULT =null;
		 RESULT = new LinkedList<CNode>();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDeclList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // varDeclList ::= varDeclList varDecl 
            {
              LinkedList<CNode> RESULT =null;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CNode> vdl = (LinkedList<CNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vd = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 vdl.addLast(new CNode(vd));
                   RESULT = vdl;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDeclList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decl ::= structDecl 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=s;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // decl ::= fnDecl 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=f;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decl ::= varDecl 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=v;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declList ::= 
            {
              CNode RESULT =null;
		 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declList ::= declList decl 
            {
              CNode RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CNode dl = (CNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new CNode("");
                   
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= errorlex 
            {
              String RESULT =null;
		System.out.println("errorlex");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= declList mainbody 
            {
              String RESULT =null;
		    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= declList 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

