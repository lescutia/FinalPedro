/* The following code was generated by JFlex 1.5.0-SNAPSHOT */

package scanner;
import java_cup.runtime.*; // defines the Symbol class

// The generated scanner will return a Symbol for each token that it finds.
// A Symbol contains an Object field named value; that field will be of type
// TokenVal, defined below.
//
// A TokenVal object contains the line number on which the token occurs as
// well as the number of the character on that line that starts the token.
// Some tokens (literals and IDs) also include the value of the token.

class TokenVal {
  // fields
    int linenum;
    int charnum;
  // constructor
    TokenVal(int line, int ch) {
        linenum = line;
        charnum = ch;
    }
}

class IntLitTokenVal extends TokenVal {
  // new field: the value of the integer literal
    int intVal;
  // constructor
    IntLitTokenVal(int line, int ch, int val) {
        super(line, ch);
        intVal = val;
    }
}

class IdTokenVal extends TokenVal {
  // new field: the value of the identifier
    String idVal;
  // constructor
    IdTokenVal(int line, int ch, String val) {
        super(line, ch);
    idVal = val;
    }
}

class StrLitTokenVal extends TokenVal {
  // new field: the value of the string literal
    String strVal;
  // constructor
    StrLitTokenVal(int line, int ch, String val) {
        super(line, ch);
        strVal = val;
    }
}

// The following class is used to keep track of the character number at which
// the current token starts on its line.
class CharNum {
    static int num=1;
}

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>C:/Users/Humanoide/Documents/Scanner/src/scanner/Scanner.flex</tt>
 */
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\6\1\54\1\54\1\54\22\0\1\2\1\50\1\7"+
    "\1\33\2\0\1\51\1\4\1\36\1\37\1\47\1\45\1\41\1\46"+
    "\1\42\1\32\12\1\1\0\1\40\1\43\1\53\1\44\1\4\1\0"+
    "\32\3\1\0\1\10\2\0\1\3\1\0\1\15\1\11\1\27\1\22"+
    "\1\25\1\20\1\3\1\31\1\16\2\3\1\13\1\14\1\17\1\12"+
    "\2\3\1\23\1\26\1\5\1\24\1\21\1\30\3\3\1\34\1\52"+
    "\1\35\7\0\1\54\u1fa2\0\1\54\1\54\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\4\1\5\1\6\12\4"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\2\1"+
    "\1\26\1\4\1\27\1\30\3\4\1\31\11\4\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\4\1\30\2\4\1\44\7\4\1\45\1\4"+
    "\1\46\1\47\1\30\1\50\1\51\2\4\1\52\1\4"+
    "\1\53\1\4\1\54\1\4\1\0\1\47\1\55\1\56"+
    "\2\4\1\57\2\30\1\60\1\61";

  private static int [] zzUnpackAction() {
    int [] result = new int[100];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\55\0\u010e"+
    "\0\u013b\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u0249\0\u0276"+
    "\0\u02a3\0\u02d0\0\u02fd\0\u032a\0\55\0\55\0\55\0\55"+
    "\0\55\0\55\0\55\0\u0357\0\u0384\0\u03b1\0\u03de\0\55"+
    "\0\u040b\0\u0438\0\u0465\0\u0492\0\u04bf\0\55\0\u04ec\0\u0519"+
    "\0\u0546\0\u0573\0\264\0\u05a0\0\u05cd\0\u05fa\0\u0627\0\u0654"+
    "\0\u0681\0\u06ae\0\u06db\0\u0708\0\55\0\55\0\55\0\55"+
    "\0\55\0\55\0\55\0\55\0\55\0\55\0\u0735\0\u0762"+
    "\0\u078f\0\u07bc\0\264\0\u07e9\0\u0816\0\u0843\0\u0870\0\u089d"+
    "\0\u08ca\0\u08f7\0\264\0\u0924\0\264\0\55\0\u0951\0\264"+
    "\0\264\0\u097e\0\u09ab\0\264\0\u09d8\0\264\0\u0a05\0\264"+
    "\0\u0a32\0\u0a5f\0\u0a8c\0\264\0\264\0\u0ab9\0\u0ae6\0\264"+
    "\0\u0a8c\0\u0b13\0\264\0\264";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[100];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\2\1\6\1\7\1\10"+
    "\1\2\1\11\2\5\1\12\1\5\1\13\1\5\1\14"+
    "\1\15\1\5\1\16\1\5\1\17\1\20\1\21\1\22"+
    "\1\5\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\57\0\1\3\55\0\1\4\53\0"+
    "\1\5\1\0\1\5\1\0\1\5\3\0\21\5\24\0"+
    "\1\5\1\0\1\5\1\0\1\5\3\0\12\5\1\45"+
    "\6\5\23\0\6\10\1\0\1\46\1\47\44\10\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\3\0\1\5\1\50"+
    "\17\5\24\0\1\5\1\0\1\5\1\0\1\5\3\0"+
    "\4\5\1\51\14\5\24\0\1\5\1\0\1\5\1\0"+
    "\1\5\3\0\6\5\1\52\1\53\11\5\24\0\1\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\54\1\5"+
    "\1\55\14\5\24\0\1\5\1\0\1\5\1\0\1\5"+
    "\3\0\1\5\1\56\17\5\24\0\1\5\1\0\1\5"+
    "\1\0\1\5\3\0\14\5\1\57\4\5\24\0\1\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\60\16\5"+
    "\24\0\1\5\1\0\1\5\1\0\1\61\3\0\21\5"+
    "\24\0\1\5\1\0\1\5\1\0\1\5\3\0\1\5"+
    "\1\62\3\5\1\63\13\5\24\0\1\5\1\0\1\5"+
    "\1\0\1\5\3\0\20\5\1\64\55\0\1\24\22\0"+
    "\6\24\1\0\46\24\43\0\1\65\7\0\1\66\45\0"+
    "\1\67\6\0\1\70\46\0\1\71\55\0\1\72\61\0"+
    "\1\73\52\0\1\74\55\0\1\75\55\0\1\76\2\0"+
    "\1\5\1\0\1\5\1\0\1\5\3\0\13\5\1\77"+
    "\5\5\23\0\4\100\2\10\1\0\2\10\6\100\1\10"+
    "\35\100\1\0\1\5\1\0\1\5\1\0\1\5\3\0"+
    "\1\5\1\101\17\5\24\0\1\5\1\0\1\5\1\0"+
    "\1\5\3\0\5\5\1\102\13\5\24\0\1\5\1\0"+
    "\1\5\1\0\1\103\3\0\21\5\24\0\1\5\1\0"+
    "\1\5\1\0\1\5\3\0\1\5\1\104\17\5\24\0"+
    "\1\5\1\0\1\5\1\0\1\5\3\0\2\5\1\105"+
    "\16\5\24\0\1\5\1\0\1\5\1\0\1\5\3\0"+
    "\5\5\1\106\13\5\24\0\1\5\1\0\1\5\1\0"+
    "\1\107\3\0\21\5\24\0\1\5\1\0\1\5\1\0"+
    "\1\5\3\0\15\5\1\110\3\5\24\0\1\5\1\0"+
    "\1\5\1\0\1\5\3\0\12\5\1\111\6\5\24\0"+
    "\1\5\1\0\1\5\1\0\1\5\3\0\13\5\1\112"+
    "\5\5\24\0\1\5\1\0\1\5\1\0\1\5\3\0"+
    "\6\5\1\113\12\5\24\0\1\5\1\0\1\5\1\0"+
    "\1\5\3\0\5\5\1\114\13\5\24\0\1\5\1\0"+
    "\1\5\1\0\1\5\3\0\14\5\1\115\4\5\23\0"+
    "\6\100\1\0\1\116\1\117\44\100\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\120\16\5\24\0"+
    "\1\5\1\0\1\5\1\0\1\5\3\0\6\5\1\121"+
    "\12\5\24\0\1\5\1\0\1\5\1\0\1\5\3\0"+
    "\4\5\1\122\14\5\24\0\1\5\1\0\1\5\1\0"+
    "\1\5\3\0\15\5\1\123\3\5\24\0\1\5\1\0"+
    "\1\5\1\0\1\5\3\0\11\5\1\124\7\5\24\0"+
    "\1\5\1\0\1\5\1\0\1\5\3\0\13\5\1\125"+
    "\5\5\24\0\1\5\1\0\1\5\1\0\1\5\3\0"+
    "\14\5\1\126\4\5\24\0\1\5\1\0\1\5\1\0"+
    "\1\5\3\0\13\5\1\127\5\5\24\0\1\5\1\0"+
    "\1\5\1\0\1\130\3\0\21\5\24\0\1\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\131\16\5\23\0"+
    "\4\132\2\100\1\0\1\133\1\100\6\132\1\100\35\132"+
    "\1\0\1\5\1\0\1\5\1\0\1\134\3\0\21\5"+
    "\24\0\1\5\1\0\1\5\1\0\1\5\3\0\14\5"+
    "\1\135\4\5\24\0\1\5\1\0\1\5\1\0\1\5"+
    "\3\0\12\5\1\136\6\5\24\0\1\5\1\0\1\5"+
    "\1\0\1\5\3\0\16\5\1\137\2\5\24\0\1\5"+
    "\1\0\1\5\1\0\1\5\3\0\14\5\1\140\4\5"+
    "\23\0\6\132\1\0\1\116\45\132\6\141\2\0\1\142"+
    "\44\141\1\0\1\5\1\0\1\5\1\0\1\5\3\0"+
    "\6\5\1\143\12\5\24\0\1\5\1\0\1\5\1\0"+
    "\1\144\3\0\21\5\27\0\2\141\1\0\2\141\6\0"+
    "\1\141\35\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2880];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\15\1\7\11\4\1\1\11"+
    "\5\1\1\11\16\1\12\11\17\1\1\11\13\1\1\0"+
    "\12\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[100];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 134) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return new Symbol(sym.errorlex, yychar, yyline, new String (yytext()));
          }
        case 50: break;
        case 2: 
          { return new Symbol(sym.INTLITERAL, yychar, yyline, new String(yytext()));
          }
        case 51: break;
        case 3: 
          { CharNum.num += yytext().length();
          }
        case 52: break;
        case 4: 
          { {return new Symbol(sym.ID, yychar, yyline, new String(yytext()));}
          }
        case 53: break;
        case 5: 
          { CharNum.num = 1;
          }
        case 54: break;
        case 6: 
          { // unterminated string
          }
        case 55: break;
        case 7: 
          { return new Symbol(sym.DIVIDE, yychar, yyline);
          }
        case 56: break;
        case 8: 
          { // comment - ignore. Note: don't need to update char num 
            // since everything to end of line will be ignored
          }
        case 57: break;
        case 9: 
          { return new Symbol(sym.LCURLY, yychar, yyline);
          }
        case 58: break;
        case 10: 
          { return new Symbol(sym.RCURLY, yychar, yyline);
          }
        case 59: break;
        case 11: 
          { return new Symbol(sym.LPAREN, yychar, yyline);
          }
        case 60: break;
        case 12: 
          { return new Symbol(sym.RPAREN, yychar, yyline);
          }
        case 61: break;
        case 13: 
          { return new Symbol(sym.SEMICOLON, yychar, yyline);
          }
        case 62: break;
        case 14: 
          { return new Symbol(sym.COMA, yychar, yyline);
          }
        case 63: break;
        case 15: 
          { return new Symbol(sym.DOT, yychar, yyline);
          }
        case 64: break;
        case 16: 
          { return new Symbol(sym.LESS, yychar, yyline);
          }
        case 65: break;
        case 17: 
          { return new Symbol(sym.GREATER, yychar, yyline);
          }
        case 66: break;
        case 18: 
          { return new Symbol(sym.PLUS, yychar, yyline);
          }
        case 67: break;
        case 19: 
          { return new Symbol(sym.MINUS ,yychar, yyline);
          }
        case 68: break;
        case 20: 
          { return new Symbol(sym.TIMES, yychar, yyline);
          }
        case 69: break;
        case 21: 
          { return new Symbol(sym.NOT, yychar, yyline);
          }
        case 70: break;
        case 22: 
          { return new Symbol(sym.ASSIGN, yychar, yyline);
          }
        case 71: break;
        case 23: 
          { return new Symbol(sym.STRINGLITERAL, yychar, yyline, new String(yytext()));
          }
        case 72: break;
        case 24: 
          { 
          }
        case 73: break;
        case 25: 
          { return new Symbol(sym.IF, yychar, yyline);
          }
        case 74: break;
        case 26: 
          { return new Symbol(sym.WRITE, yychar, yyline);
          }
        case 75: break;
        case 27: 
          { return new Symbol(sym.LESSEQ, yychar, yyline);
          }
        case 76: break;
        case 28: 
          { return new Symbol(sym.READ, yychar, yyline);
          }
        case 77: break;
        case 29: 
          { return new Symbol(sym.GREATEREQ, yychar, yyline);
          }
        case 78: break;
        case 30: 
          { return new Symbol(sym.PLUSPLUS, yychar, yyline);
          }
        case 79: break;
        case 31: 
          { return new Symbol(sym.MINUSMINUS, yychar, yyline);
          }
        case 80: break;
        case 32: 
          { return new Symbol(sym.NOTEQUALS, yychar, yyline);
          }
        case 81: break;
        case 33: 
          { return new Symbol(sym.AND, yychar, yyline);
          }
        case 82: break;
        case 34: 
          { return new Symbol(sym.OR, yychar, yyline);
          }
        case 83: break;
        case 35: 
          { return new Symbol(sym.EQUALS, yychar, yyline);
          }
        case 84: break;
        case 36: 
          { return new Symbol(sym.INT, yychar, yyline);
          }
        case 85: break;
        case 37: 
          { return new Symbol(sym.CIN, yychar, yyline);
          }
        case 86: break;
        case 38: 
          { return new Symbol(sym.TRUE, yychar, yyline);
          }
        case 87: break;
        case 39: 
          { // bad escape character

            CharNum.num += yytext().length();
          }
        case 88: break;
        case 40: 
          { return new Symbol(sym.BOOL, yychar, yyline);
          }
        case 89: break;
        case 41: 
          { return new Symbol(sym.MAIN, yychar, yyline);
          }
        case 90: break;
        case 42: 
          { return new Symbol(sym.VOID, yychar, yyline);
          }
        case 91: break;
        case 43: 
          { return new Symbol(sym.ELSE, yychar, yyline);
          }
        case 92: break;
        case 44: 
          { return new Symbol(sym.COUT, yychar, yyline);
          }
        case 93: break;
        case 45: 
          { return new Symbol(sym.FLOAT, yychar, yyline);
          }
        case 94: break;
        case 46: 
          { return new Symbol(sym.FALSE, yychar, yyline);
          }
        case 95: break;
        case 47: 
          { return new Symbol(sym.WHILE, yychar, yyline);
          }
        case 96: break;
        case 48: 
          { return new Symbol(sym.RETURN, yychar, yyline);
          }
        case 97: break;
        case 49: 
          { return new Symbol(sym.STRUCT, yychar, yyline);
          }
        case 98: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { return new Symbol(sym.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
